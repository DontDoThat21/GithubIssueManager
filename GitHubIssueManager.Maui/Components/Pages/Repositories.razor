@page "/repositories"
@using GitHubIssueManager.Maui.Models
@using GitHubIssueManager.Maui.Services
@inject GitHubService GitHubService
@inject RepositoryService RepositoryService
@inject AuthenticationService AuthService
@rendermode InteractiveServer

<PageTitle>Repositories</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">GitHub Repositories</MudText>

@if (!AuthService.IsAuthenticated)
{
    <MudAlert Severity="Severity.Warning">
        <MudText Typo="Typo.h6" Class="mb-2">Authentication Required</MudText>
        <MudText>
            Please configure your GitHub token in the 
            <MudLink Href="/settings" Color="Color.Primary">Settings</MudLink> 
            page to access repositories.
        </MudText>
    </MudAlert>
}
else
{
    <MudGrid Class="mb-4">
        <MudItem xs="12" md="8">
            <MudTextField @bind-Value="searchQuery" 
                          Label="Search repositories..." 
                          Variant="Variant.Outlined" 
                          Adornment="Adornment.End" 
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          @onkeypress="OnSearchKeyPress"
                          FullWidth="true" />
        </MudItem>
        <MudItem xs="12" md="4">
            <MudStack Row="true" Spacing="2">
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          StartIcon="@Icons.Material.Filled.Search"
                          OnClick="SearchRepositories">
                    Search
                </MudButton>
                <MudButton Variant="Variant.Outlined" 
                          Color="Color.Primary" 
                          StartIcon="@Icons.Material.Filled.Folder"
                          OnClick="LoadMyRepositories">
                    My Repos
                </MudButton>
            </MudStack>
        </MudItem>
    </MudGrid>

    @if (!isLoading && repositories.Any())
    {
        <MudText Typo="Typo.body2" Class="mb-4">
            @repositories.Count Repository@(repositories.Count == 1 ? "" : "s")
        </MudText>
    }

    @if (isLoading)
    {
        <MudStack AlignItems="AlignItems.Center" Class="py-8">
            <MudProgressCircular Indeterminate="true" />
            <MudText Typo="Typo.body2">Loading repositories...</MudText>
        </MudStack>
    }
    else if (repositories.Any())
    {
        <MudGrid>
            @foreach (var repo in repositories)
            {
                <MudItem xs="12" md="6" lg="4">
                    <MudCard Class="h-100 d-flex flex-column">
                        <MudCardContent Class="flex-grow-1">
                            <MudStack>
                                <MudText Typo="Typo.h6" Class="d-flex align-center">
                                    <MudLink Href="@($"/issues/{repo.Owner.Login}/{repo.Name}")" Color="Color.Primary">
                                        @repo.Name
                                    </MudLink>
                                    @if (repo.Private)
                                    {
                                        <MudText Typo="Typo.caption" Color="Color.Secondary" Class="ml-2">Private</MudText>
                                    }
                                </MudText>
                                <MudText Typo="Typo.subtitle2" Color="Color.Secondary">@repo.Owner.Login</MudText>
                                <MudText Typo="Typo.body2">@repo.Description</MudText>
                                
                                <MudStack Row="true" Justify="Justify.SpaceBetween" Class="mt-2">
                                    <MudStack Row="true" Spacing="3">
                                        <MudText Typo="Typo.caption" Class="d-flex align-center">
                                            <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Small" Class="mr-1" />
                                            @repo.StargazersCount
                                        </MudText>
                                        <MudText Typo="Typo.caption" Class="d-flex align-center">
                                            <MudIcon Icon="@Icons.Material.Filled.CallSplit" Size="Size.Small" Class="mr-1" />
                                            @repo.ForksCount
                                        </MudText>
                                        <MudLink Href="@($"/issues/{repo.Owner.Login}/{repo.Name}")" Class="d-flex align-center" Color="Color.Primary">
                                            <MudIcon Icon="@Icons.Material.Filled.BugReport" Size="Size.Small" Class="mr-1" />
                                            <MudText Typo="Typo.caption">@repo.OpenIssuesCount</MudText>
                                        </MudLink>
                                    </MudStack>
                                </MudStack>
                                
                                @if (!string.IsNullOrEmpty(repo.Language))
                                {
                                    <MudText Typo="Typo.caption" Color="Color.Primary" Class="align-self-start">
                                        @repo.Language
                                    </MudText>
                                }
                            </MudStack>
                        </MudCardContent>
                        <MudCardActions>
                            <MudStack Row="true" Spacing="1" Style="width: 100%" Wrap="Wrap.Wrap">
                                @if (RepositoryService.IsWatched(repo.Id))
                                {
                                    <MudButton Size="Size.Small" 
                                              Variant="Variant.Outlined" 
                                              Color="Color.Error" 
                                              StartIcon="@Icons.Material.Filled.RemoveCircle"
                                              OnClick="() => RemoveFromWatchlist(repo)">
                                        Remove
                                    </MudButton>
                                    <MudButton Size="Size.Small" 
                                              Variant="Variant.Filled" 
                                              Color="Color.Primary" 
                                              StartIcon="@Icons.Material.Filled.BugReport"
                                              Href="@($"/issues/{repo.Owner.Login}/{repo.Name}")">
                                        Issues
                                    </MudButton>
                                }
                                else
                                {
                                    <MudButton Size="Size.Small" 
                                              Variant="Variant.Outlined" 
                                              Color="Color.Primary" 
                                              StartIcon="@Icons.Material.Filled.Add"
                                              OnClick="() => AddToWatchlist(repo)">
                                        Watch
                                    </MudButton>
                                }
                                <MudButton Size="Size.Small" 
                                          Variant="Variant.Outlined" 
                                          Color="Color.Secondary" 
                                          StartIcon="@Icons.Material.Filled.Code"
                                          Href="@($"git-client://clone/?repo={repo.HtmlUrl}")">
                                    VS
                                </MudButton>
                                <MudButton Size="Size.Small" 
                                          Variant="Variant.Filled" 
                                          Color="Color.Success" 
                                          StartIcon="@Icons.Material.Filled.Add"
                                          OnClick="() => ShowAddTaskModal(repo)">
                                    Task
                                </MudButton>
                            </MudStack>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
}

<!-- Demo cards for testing styling - Always show for now -->
<MudText Typo="Typo.body2" Class="mb-4">
    3 Demo Repositories (Enhanced Border Testing)
</MudText>
<MudGrid>
    <!-- Demo Card 1 -->
    <MudItem xs="12" md="6" lg="4">
        <MudCard Class="h-100 d-flex flex-column">
            <MudCardContent Class="flex-grow-1">
                <MudStack>
                    <MudText Typo="Typo.h6" Class="d-flex align-center">
                        <MudLink Href="#" Color="Color.Primary">
                            ChromeVolumeController
                        </MudLink>
                        <MudText Typo="Typo.caption" Color="Color.Secondary" Class="ml-2">Private</MudText>
                    </MudText>
                    <MudText Typo="Typo.subtitle2" Color="Color.Secondary">DontDoThat21</MudText>
                    <MudText Typo="Typo.body2">A simple Chrome extension that allows you to control the volume of individual tabs from a convenient popup interface.</MudText>
                    
                    <MudStack Row="true" Justify="Justify.SpaceBetween" Class="mt-2">
                        <MudStack Row="true" Spacing="3">
                            <MudText Typo="Typo.caption" Class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Small" Class="mr-1" />
                                0
                            </MudText>
                            <MudText Typo="Typo.caption" Class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.CallSplit" Size="Size.Small" Class="mr-1" />
                                0
                            </MudText>
                            <MudLink Href="#" Class="d-flex align-center" Color="Color.Primary">
                                <MudIcon Icon="@Icons.Material.Filled.BugReport" Size="Size.Small" Class="mr-1" />
                                <MudText Typo="Typo.caption">2</MudText>
                            </MudLink>
                        </MudStack>
                    </MudStack>
                    
                    <MudText Typo="Typo.caption" Color="Color.Primary" Class="align-self-start">
                        JavaScript
                    </MudText>
                </MudStack>
            </MudCardContent>
            <MudCardActions>
                <MudStack Row="true" Spacing="1" Style="width: 100%" Wrap="Wrap.Wrap">
                    <MudButton Size="Size.Small" 
                              Variant="Variant.Outlined" 
                              Color="Color.Primary" 
                              StartIcon="@Icons.Material.Filled.Add">
                        Watch
                    </MudButton>
                    <MudButton Size="Size.Small" 
                              Variant="Variant.Outlined" 
                              Color="Color.Secondary" 
                              StartIcon="@Icons.Material.Filled.Code">
                        VS
                    </MudButton>
                    <MudButton Size="Size.Small" 
                              Variant="Variant.Filled" 
                              Color="Color.Success" 
                              StartIcon="@Icons.Material.Filled.Add">
                        Task
                    </MudButton>
                </MudStack>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <!-- Demo Card 2 -->
    <MudItem xs="12" md="6" lg="4">
        <MudCard Class="h-100 d-flex flex-column">
            <MudCardContent Class="flex-grow-1">
                <MudStack>
                    <MudText Typo="Typo.h6" Class="d-flex align-center">
                        <MudLink Href="#" Color="Color.Primary">
                            chromiumBorderlessVideos
                        </MudLink>
                        <MudText Typo="Typo.caption" Color="Color.Secondary" Class="ml-2">Private</MudText>
                    </MudText>
                    <MudText Typo="Typo.subtitle2" Color="Color.Secondary">DontDoThat21</MudText>
                    <MudText Typo="Typo.body2">CleanVideo UI popups prioritizing less clutter</MudText>
                    
                    <MudStack Row="true" Justify="Justify.SpaceBetween" Class="mt-2">
                        <MudStack Row="true" Spacing="3">
                            <MudText Typo="Typo.caption" Class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Small" Class="mr-1" />
                                0
                            </MudText>
                            <MudText Typo="Typo.caption" Class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.CallSplit" Size="Size.Small" Class="mr-1" />
                                0
                            </MudText>
                            <MudLink Href="#" Class="d-flex align-center" Color="Color.Primary">
                                <MudIcon Icon="@Icons.Material.Filled.BugReport" Size="Size.Small" Class="mr-1" />
                                <MudText Typo="Typo.caption">1</MudText>
                            </MudLink>
                        </MudStack>
                    </MudStack>
                    
                    <MudText Typo="Typo.caption" Color="Color.Primary" Class="align-self-start">
                        HTML
                    </MudText>
                </MudStack>
            </MudCardContent>
            <MudCardActions>
                <MudStack Row="true" Spacing="1" Style="width: 100%" Wrap="Wrap.Wrap">
                    <MudButton Size="Size.Small" 
                              Variant="Variant.Outlined" 
                              Color="Color.Primary" 
                              StartIcon="@Icons.Material.Filled.Add">
                        Watch
                    </MudButton>
                    <MudButton Size="Size.Small" 
                              Variant="Variant.Outlined" 
                              Color="Color.Secondary" 
                              StartIcon="@Icons.Material.Filled.Code">
                        VS
                    </MudButton>
                    <MudButton Size="Size.Small" 
                              Variant="Variant.Filled" 
                              Color="Color.Success" 
                              StartIcon="@Icons.Material.Filled.Add">
                        Task
                    </MudButton>
                </MudStack>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <!-- Demo Card 3 -->
    <MudItem xs="12" md="6" lg="4">
        <MudCard Class="h-100 d-flex flex-column">
            <MudCardContent Class="flex-grow-1">
                <MudStack>
                    <MudText Typo="Typo.h6" Class="d-flex align-center">
                        <MudLink Href="#" Color="Color.Primary">
                            chromiumSearchEngineRedirect
                        </MudLink>
                    </MudText>
                    <MudText Typo="Typo.subtitle2" Color="Color.Secondary">DontDoThat21</MudText>
                    <MudText Typo="Typo.body2">chromiumSearchEngineRedirect (maybe one day)</MudText>
                    
                    <MudStack Row="true" Justify="Justify.SpaceBetween" Class="mt-2">
                        <MudStack Row="true" Spacing="3">
                            <MudText Typo="Typo.caption" Class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Small" Class="mr-1" />
                                0
                            </MudText>
                            <MudText Typo="Typo.caption" Class="d-flex align-center">
                                <MudIcon Icon="@Icons.Material.Filled.CallSplit" Size="Size.Small" Class="mr-1" />
                                0
                            </MudText>
                            <MudLink Href="#" Class="d-flex align-center" Color="Color.Primary">
                                <MudIcon Icon="@Icons.Material.Filled.BugReport" Size="Size.Small" Class="mr-1" />
                                <MudText Typo="Typo.caption">0</MudText>
                            </MudLink>
                        </MudStack>
                    </MudStack>
                    
                    <MudText Typo="Typo.caption" Color="Color.Primary" Class="align-self-start">
                        HTML
                    </MudText>
                </MudStack>
            </MudCardContent>
            <MudCardActions>
                <MudStack Row="true" Spacing="1" Style="width: 100%" Wrap="Wrap.Wrap">
                    <MudButton Size="Size.Small" 
                              Variant="Variant.Outlined" 
                              Color="Color.Primary" 
                              StartIcon="@Icons.Material.Filled.Add">
                        Watch
                    </MudButton>
                    <MudButton Size="Size.Small" 
                              Variant="Variant.Outlined" 
                              Color="Color.Secondary" 
                              StartIcon="@Icons.Material.Filled.Code">
                        VS
                    </MudButton>
                    <MudButton Size="Size.Small" 
                              Variant="Variant.Filled" 
                              Color="Color.Success" 
                              StartIcon="@Icons.Material.Filled.Add">
                        Task
                    </MudButton>
                </MudStack>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

<MudDialog @bind-Visible="showAddTaskModal" MaxWidth="MaxWidth.Medium">
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-4">Add Task to @selectedRepository?.Name</MudText>
        
        <MudTextField @bind-Value="newTaskTitle" 
                      Label="Task Title *" 
                      Variant="Variant.Outlined" 
                      Required="true"
                      Class="mb-4" />
        
        <MudTextField @bind-Value="newTaskDescription" 
                      Label="Task Description" 
                      Variant="Variant.Outlined" 
                      Lines="4"
                      Class="mb-4" />
        
        <MudTextField Value="@GetTaskJson()" 
                      Label="Task JSON (MCP Format)" 
                      Variant="Variant.Outlined" 
                      Lines="6"
                      ReadOnly="true"
                      HelperText="This JSON shows the MCP metadata that will be included with the GitHub issue."
                      Class="mb-4" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseAddTaskModal" Variant="Variant.Text">Cancel</MudButton>
        <MudButton OnClick="CreateTask" 
                   Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   Disabled="@(string.IsNullOrWhiteSpace(newTaskTitle) || isCreatingTask)">
            @if (isCreatingTask)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
            }
            Create Task
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<GitHubRepository> repositories = new();
    private string searchQuery = string.Empty;
    private bool isLoading = false;
    
    // Add Task Modal properties
    private bool showAddTaskModal = false;
    private bool isCreatingTask = false;
    private GitHubRepository? selectedRepository = null;
    private string newTaskTitle = string.Empty;
    private string newTaskDescription = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.IsAuthenticated)
        {
            GitHubService.SetAuthentication(AuthService.CurrentToken!);
            await LoadMyRepositories();
        }
    }

    private async Task SearchRepositories()
    {
        if (string.IsNullOrWhiteSpace(searchQuery)) return;

        isLoading = true;
        StateHasChanged();

        try
        {
            var results = await GitHubService.SearchRepositoriesAsync(searchQuery);
            repositories = results.ToList();
        }
        catch (Exception ex)
        {
            // Handle error - could add toast notification here
            Console.WriteLine($"Error searching repositories: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadMyRepositories()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var results = await GitHubService.GetRepositoriesAsync();
            var allRepos = results.ToList();
            
            // Filter by search query if one exists
            if (!string.IsNullOrWhiteSpace(searchQuery))
            {
                repositories = allRepos.Where(r => 
                    r.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                    (r.Description?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    r.Owner.Login.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                    .ToList();
            }
            else
            {
                repositories = allRepos;
            }
        }
        catch (Exception ex)
        {
            // Handle error - could add toast notification here
            Console.WriteLine($"Error loading repositories: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchRepositories();
        }
    }

    private void AddToWatchlist(GitHubRepository repository)
    {
        RepositoryService.AddRepository(repository);
        StateHasChanged();
    }

    private void RemoveFromWatchlist(GitHubRepository repository)
    {
        RepositoryService.RemoveRepository(repository.Id);
        StateHasChanged();
    }
    
    private void ShowAddTaskModal(GitHubRepository repository)
    {
        selectedRepository = repository;
        newTaskTitle = string.Empty;
        newTaskDescription = string.Empty;
        showAddTaskModal = true;
        StateHasChanged();
    }
    
    private void CloseAddTaskModal()
    {
        showAddTaskModal = false;
        selectedRepository = null;
        newTaskTitle = string.Empty;
        newTaskDescription = string.Empty;
        isCreatingTask = false;
        StateHasChanged();
    }
    
    private async Task CreateTask()
    {
        if (selectedRepository == null || string.IsNullOrWhiteSpace(newTaskTitle))
            return;
            
        isCreatingTask = true;
        StateHasChanged();
        
        try
        {
            var taskBody = GetFormattedIssueBody();
            await GitHubService.CreateIssueAsync(selectedRepository.Owner.Login, selectedRepository.Name, newTaskTitle, taskBody);
            CloseAddTaskModal();
            
            // Refresh the repository data to update issue count
            if (!string.IsNullOrWhiteSpace(searchQuery))
            {
                await SearchRepositories();
            }
            else
            {
                await LoadMyRepositories();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating task: {ex.Message}");
        }
        finally
        {
            isCreatingTask = false;
            StateHasChanged();
        }
    }
    
    private string GetTaskJson()
    {
        var task = new
        {
            type = "task",
            title = newTaskTitle,
            description = newTaskDescription,
            status = "open",
            priority = "medium",
            created_at = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ssZ"),
            repository = selectedRepository?.FullName ?? "",
            mcp_version = "1.0"
        };
        
        return System.Text.Json.JsonSerializer.Serialize(task, new System.Text.Json.JsonSerializerOptions 
        { 
            WriteIndented = true 
        });
    }
    
    private string GetFormattedIssueBody()
    {
        // Use the task description as the main body content
        var body = newTaskDescription ?? "";
        
        // Add MCP metadata in a structured, human-readable format
        var mcpMetadata = $@"

---

**Task Metadata (MCP v1.0)**
- **Type**: Task
- **Status**: Open  
- **Priority**: Medium
- **Created**: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC
- **Repository**: {selectedRepository?.FullName ?? ""}

<!-- MCP JSON: {GetTaskJson().Replace("<!--", "").Replace("-->", "")} -->";

        return body + mcpMetadata;
    }
}