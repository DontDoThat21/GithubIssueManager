@using GitHubIssueManager.Maui.Models
@using GitHubIssueManager.Maui.Services
@using MudBlazor
@inject GitHubService GitHubService

<MudDialog>
    <TitleContent>
        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
            <MudIcon Icon="@Icons.Material.Filled.Assignment" Color="Color.Primary" />
            <MudText Typo="Typo.h6">Create MCP Task for @Repository?.Name</MudText>
        </MudStack>
    </TitleContent>
    <DialogContent>
        <MudStack Spacing="3">
            <MudTextField @bind-Value="taskTitle" 
                          Label="Task Title *" 
                          Variant="Variant.Outlined" 
                          Required="true"
                          Placeholder="Enter a descriptive title for the task..."
                          HelperText="A clear, concise title that describes the task"
                          Immediate="true" />
            
            <MudTextField @bind-Value="taskDescription" 
                          Label="Task Description" 
                          Variant="Variant.Outlined" 
                          Lines="4"
                          Placeholder="Provide detailed instructions for the task..."
                          HelperText="Detailed description of what needs to be accomplished (supports Markdown)"
                          Immediate="true" />
            
            <MudExpansionPanels Elevation="0">
                <MudExpansionPanel Icon="@Icons.Material.Filled.Code" Text="MCP Metadata Preview">
                    <MudTextField Value="@GetTaskJson()" 
                                  Label="Generated MCP JSON" 
                                  Variant="Variant.Outlined" 
                                  Lines="8"
                                  ReadOnly="true"
                                  HelperText="This JSON metadata will be included with the GitHub issue for MCP integration" />
                </MudExpansionPanel>
            </MudExpansionPanels>
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Dense="true">
                    <MudText Typo="Typo.body2">@errorMessage</MudText>
                </MudAlert>
            }
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" 
                   Variant="Variant.Text"
                   Color="Color.Default"
                   StartIcon="@Icons.Material.Filled.Cancel">
            Cancel
        </MudButton>
        <MudButton OnClick="CreateTask" 
                   Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   StartIcon="@Icons.Material.Filled.Add"
                   Disabled="@(string.IsNullOrWhiteSpace(taskTitle) || isCreating)">
            @if (isCreating)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                <span>Creating...</span>
            }
            else
            {
                <span>Create Task</span>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public GitHubRepository? Repository { get; set; }

    private string taskTitle = string.Empty;
    private string taskDescription = string.Empty;
    private string errorMessage = string.Empty;
    private bool isCreating = false;

    private async Task CreateTask()
    {
        if (Repository == null || string.IsNullOrWhiteSpace(taskTitle))
            return;
            
        isCreating = true;
        errorMessage = string.Empty;
        StateHasChanged();
        
        try
        {
            var taskBody = GetFormattedIssueBody();
            var createdIssue = await GitHubService.CreateIssueAsync(Repository.Owner.Login, Repository.Name, taskTitle, taskBody);
            MudDialog.Close(DialogResult.Ok(createdIssue));
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating task: {ex.Message}";
        }
        finally
        {
            isCreating = false;
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
    
    private string GetTaskJson()
    {
        var task = new
        {
            type = "task",
            title = taskTitle,
            description = taskDescription,
            status = "open",
            priority = "medium",
            created_at = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ssZ"),
            repository = Repository?.FullName ?? "",
            mcp_version = "1.0",
            metadata = new
            {
                github_issue = true,
                assignable = true,
                automated_workflow = false
            }
        };
        
        return System.Text.Json.JsonSerializer.Serialize(task, new System.Text.Json.JsonSerializerOptions 
        { 
            WriteIndented = true 
        });
    }
    
    private string GetFormattedIssueBody()
    {
        var body = taskDescription ?? "";
        var createdDate = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss");
        var repoName = Repository?.FullName ?? "";
        var jsonData = GetTaskJson().Replace("<!--", "").Replace("-->", "");
        
        var mcpMetadata = $@"

---

## ?? MCP Task Metadata

**Task Information:**
- **Type**: MCP Task
- **Status**: Open  
- **Priority**: Medium
- **Created**: {createdDate} UTC
- **Repository**: {repoName}
- **MCP Version**: 1.0

**Integration Details:**
- ? GitHub Issue Integration
- ? Assignable to team members
- ? MCP-compatible metadata included

<!-- MCP-JSON-START
{jsonData}
MCP-JSON-END -->";

        return body + mcpMetadata;
    }
}