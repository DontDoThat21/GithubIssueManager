@page "/issues/{owner}/{repo}"
@using GitHubIssueManager.Maui.Models
@using GitHubIssueManager.Maui.Services
@using MudBlazor
@inject GitHubService GitHubService
@inject AuthenticationService AuthService
@inject RepositoryService RepositoryService
@rendermode InteractiveServer

<PageTitle>@Owner/@Repo - Issues</PageTitle>

<!-- Repository Header Section -->
<MudPaper Elevation="2" Class="pa-4 mb-4" Style="background: linear-gradient(135deg, #1e1e1e 0%, #2d2d2d 100%);">
    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-3">
        <MudStack Spacing="1">
            <MudBreadcrumbs Items="_breadcrumbItems" Separator="NavigationSeparator.ChevronRight">
                <ItemTemplate Context="item">
                    @if (item.Href != null)
                    {
                        <MudLink Href="@item.Href" Style="color: #FFD700;">@item.Text</MudLink>
                    }
                    else
                    {
                        <MudText Color="Color.Default">@item.Text</MudText>
                    }
                </ItemTemplate>
            </MudBreadcrumbs>
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudIcon Icon="@Icons.Material.Filled.Folder" Color="Color.Primary" Size="Size.Large" />
                <MudText Typo="Typo.h4" Color="Color.Default">@Owner/@Repo</MudText>
                @if (repositoryInfo != null && repositoryInfo.Private)
                {
                    <MudChip T="string" Size="Size.Small" Color="Color.Warning" Text="Private" />
                }
            </MudStack>
            @if (repositoryInfo != null && !string.IsNullOrEmpty(repositoryInfo.Description))
            {
                <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mt-1">@repositoryInfo.Description</MudText>
            }
        </MudStack>
        
        <MudStack Row="true" Spacing="2">
            <MudButton Variant="Variant.Outlined" 
                       Color="Color.Primary" 
                       StartIcon="@Icons.Material.Filled.OpenInNew"
                       Href="@($"https://github.com/{Owner}/{Repo}")"
                       Target="_blank">
                View on GitHub
            </MudButton>
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       StartIcon="@Icons.Material.Filled.Add"
                       OnClick="() => ShowCreateIssueModal = true">
                New Issue
            </MudButton>
        </MudStack>
    </MudStack>
    
    @if (repositoryInfo != null)
    {
        <MudStack Row="true" Spacing="4" AlignItems="AlignItems.Center" Class="mt-3">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                <MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning" Size="Size.Small" />
                <MudText Typo="Typo.body2">@repositoryInfo.StargazersCount</MudText>
            </MudStack>
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                <MudIcon Icon="@Icons.Material.Filled.CallSplit" Color="Color.Info" Size="Size.Small" />
                <MudText Typo="Typo.body2">@repositoryInfo.ForksCount</MudText>
            </MudStack>
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                <MudIcon Icon="@Icons.Material.Filled.BugReport" Color="Color.Error" Size="Size.Small" />
                <MudText Typo="Typo.body2">@repositoryInfo.OpenIssuesCount Open Issues</MudText>
            </MudStack>
            @if (!string.IsNullOrEmpty(repositoryInfo.Language))
            {
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                    <MudIcon Icon="@Icons.Material.Filled.Code" Color="Color.Secondary" Size="Size.Small" />
                    <MudText Typo="Typo.body2">@repositoryInfo.Language</MudText>
                </MudStack>
            }
            @if (RepositoryService.IsWatched(repositoryInfo.Id))
            {
                <MudChip T="string" Size="Size.Small" Color="Color.Success" Icon="@Icons.Material.Filled.Visibility" Text="Watching" />
            }
        </MudStack>
    }
</MudPaper>

<!-- Issues Content -->
@if (isLoading)
{
    <MudPaper Elevation="1" Class="pa-8">
        <MudStack AlignItems="AlignItems.Center" Spacing="3">
            <MudProgressCircular Size="Size.Large" Indeterminate="true" Color="Color.Primary" />
            <MudText Typo="Typo.h6">Loading issues...</MudText>
        </MudStack>
    </MudPaper>
}
else if (issues.Any())
{
    <MudStack Spacing="2">
        @foreach (var issue in issues)
        {
            <MudPaper Elevation="1" Class="pa-4">
                <MudStack Spacing="2">
                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start">
                        <MudStack Spacing="1" Style="flex-grow: 1;">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                <MudText Typo="Typo.h6">
                                    <MudLink Href="@issue.HtmlUrl" Target="_blank" Color="Color.Primary">
                                        #@issue.Number @issue.Title
                                    </MudLink>
                                </MudText>
                                <MudChip Size="Size.Small" 
                                         Color="@(issue.State.ToLower() == "open" ? Color.Success : Color.Default)"
                                         T="string"
                                         Text="@issue.State" />
                            </MudStack>
                            
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                    <MudAvatar Size="Size.Small" Src="@issue.User.AvatarUrl" />
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">@issue.User.Login</MudText>
                                </MudStack>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                    opened @issue.CreatedAt.ToString("MMM dd, yyyy")
                                </MudText>
                                @if (issue.Comments > 0)
                                {
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                        <MudIcon Icon="@Icons.Material.Filled.Comment" Size="Size.Small" Color="Color.Secondary" />
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">@issue.Comments</MudText>
                                    </MudStack>
                                }
                            </MudStack>
                        </MudStack>
                        
                        <MudButton Size="Size.Small" 
                                   Variant="Variant.Outlined" 
                                   Color="Color.Primary" 
                                   StartIcon="@Icons.Material.Filled.PersonAdd"
                                   OnClick="() => ShowAssignModal(issue)">
                            Assign
                        </MudButton>
                    </MudStack>
                    
                    @if (!string.IsNullOrEmpty(issue.Body))
                    {
                        <MudText Typo="Typo.body2" Color="Color.Default" Class="mt-2">
                            @(issue.Body.Length > 200 ? issue.Body.Substring(0, 200) + "..." : issue.Body)
                        </MudText>
                    }
                    
                    @if (issue.Labels.Any())
                    {
                        <MudStack Row="true" Spacing="1" Class="mt-2" Wrap="Wrap.Wrap">
                            @foreach (var label in issue.Labels)
                            {
                                <MudChip T="string" Size="Size.Small" 
                                         Style="@($"background-color: #{label.Color}; color: {GetContrastColor(label.Color)}")"
                                         Text="@label.Name" />
                            }
                        </MudStack>
                    }
                    
                    @if (issue.Assignees.Any() || issue.Milestone != null)
                    {
                        <MudStack Row="true" Spacing="3" Class="mt-2" AlignItems="AlignItems.Center">
                            @if (issue.Assignees.Any())
                            {
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                    <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" Color="Color.Secondary" />
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                                        Assigned to @string.Join(", ", issue.Assignees.Select(a => a.Login))
                                    </MudText>
                                </MudStack>
                            }
                            @if (issue.Milestone != null)
                            {
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                    <MudIcon Icon="@Icons.Material.Filled.Flag" Size="Size.Small" Color="Color.Secondary" />
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">@issue.Milestone.Title</MudText>
                                </MudStack>
                            }
                        </MudStack>
                    }
                </MudStack>
            </MudPaper>
        }
    </MudStack>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <MudAlert Severity="Severity.Warning" Class="mb-4">
        <MudText Typo="Typo.h6" Class="mb-2">Error Loading Issues</MudText>
        <MudText>@errorMessage</MudText>
        @if (errorMessage.Contains("Authentication"))
        {
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Primary" 
                       Href="/settings" 
                       Class="mt-2">
                Go to Settings
            </MudButton>
        }
    </MudAlert>
}
else
{
    <MudPaper Elevation="1" Class="pa-6">
        <MudStack AlignItems="AlignItems.Center" Spacing="3">
            <MudIcon Icon="@Icons.Material.Filled.BugReport" Size="Size.Large" Color="Color.Secondary" />
            <MudText Typo="Typo.h6">No Issues Found</MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary" Align="Align.Center">
                This repository doesn't have any issues yet.
            </MudText>
            @if (AuthService.IsAuthenticated)
            {
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary" 
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="() => ShowCreateIssueModal = true">
                    Create First Issue
                </MudButton>
            }
        </MudStack>
    </MudPaper>
}

<!-- Create Issue Modal -->
<MudDialog @bind-Visible="ShowCreateIssueModal" Options="@(new DialogOptions { MaxWidth = MaxWidth.Large })">
    <DialogContent>
        <MudStack Spacing="3">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudIcon Icon="@Icons.Material.Filled.Add" Color="Color.Primary" />
                <MudText Typo="Typo.h6">Create New Issue for @Owner/@Repo</MudText>
            </MudStack>
            
            <MudTextField @bind-Value="newIssueTitle" 
                          Label="Issue Title" 
                          Placeholder="Brief description of the issue..."
                          Variant="Variant.Outlined"
                          FullWidth="true"
                          Required="true" />
            
            <MudTextField @bind-Value="newIssueBody" 
                          Label="Issue Description" 
                          Placeholder="Provide a detailed description of the issue..."
                          Lines="6"
                          Variant="Variant.Outlined"
                          FullWidth="true" />
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseCreateIssueModal" 
                   Variant="Variant.Text">
            Cancel
        </MudButton>
        <MudButton OnClick="CreateIssue" 
                   Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   Disabled="@(string.IsNullOrWhiteSpace(newIssueTitle) || isCreatingIssue)">
            @if (isCreatingIssue)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
            }
            Create Issue
        </MudButton>
    </DialogActions>
</MudDialog>

<!-- Assign Issue Modal -->
<MudDialog @bind-Visible="ShowAssignIssueModal" Options="@(new DialogOptions { MaxWidth = MaxWidth.Medium })">
    <DialogContent>
        <MudStack Spacing="3">
            <MudText Typo="Typo.h6">Assign Issue #@selectedIssue?.Number</MudText>
            
            @if (agentAssignmentWarning != null)
            {
                <MudAlert Severity="Severity.Warning" Dense="true">
                    <MudText Typo="Typo.body2">@agentAssignmentWarning</MudText>
                </MudAlert>
            }
            
            <MudText Typo="Typo.subtitle1">Available Assignees</MudText>
            
            @if (isLoadingAssignees)
            {
                <MudStack AlignItems="AlignItems.Center" Class="py-4">
                    <MudProgressCircular Size="Size.Medium" Indeterminate="true" />
                    <MudText Typo="Typo.body2">Loading assignees...</MudText>
                </MudStack>
            }
            else if (availableAssignees.Any())
            {
                <MudStack Spacing="2">
                    @foreach (var assignee in availableAssignees)
                    {
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                            <MudCheckBox @bind-Value="@selectedAssignees[assignee.Login]" 
                                         Color="Color.Primary" />
                            <MudAvatar Size="Size.Small" Src="@assignee.AvatarUrl" />
                            <MudText Typo="Typo.body1">@assignee.Login</MudText>
                        </MudStack>
                    }
                </MudStack>
            }
            else
            {
                <MudAlert Severity="Severity.Info" Dense="true">
                    <MudText Typo="Typo.body2">No assignees available for this repository.</MudText>
                </MudAlert>
            }
            
            @if (selectedIssue?.Assignees.Any() == true)
            {
                <MudDivider />
                <MudText Typo="Typo.subtitle2">Currently Assigned</MudText>
                <MudStack Row="true" Spacing="2" Wrap="Wrap.Wrap">
                    @foreach (var assignee in selectedIssue.Assignees)
                    {
                        <MudChip T="string" Size="Size.Small" Color="Color.Primary">
                            <MudAvatar Size="Size.Small" Src="@assignee.AvatarUrl" Class="mr-1" />
                            @assignee.Login
                        </MudChip>
                    }
                </MudStack>
            }
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseAssignModal" Variant="Variant.Text">
            Cancel
        </MudButton>
        <MudButton OnClick="AssignIssue" 
                   Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   Disabled="@isAssigningIssue">
            @if (isAssigningIssue)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" Style="margin-right: 0.5rem;" />
            }
            Update Assignment
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public string Owner { get; set; } = string.Empty;
    [Parameter] public string Repo { get; set; } = string.Empty;

    private List<GitHubIssue> issues = new();
    private GitHubRepository? repositoryInfo = null;
    private bool isLoading = false;
    private string? errorMessage = null;
    private bool ShowCreateIssueModal = false;
    private bool isCreatingIssue = false;
    private string newIssueTitle = string.Empty;
    private string newIssueBody = string.Empty;

    // Breadcrumb items
    private List<BreadcrumbItem> _breadcrumbItems = new();

    // Assignment-related fields
    private bool ShowAssignIssueModal = false;
    private bool isLoadingAssignees = false;
    private bool isAssigningIssue = false;
    private GitHubIssue? selectedIssue = null;
    private List<GitHubUser> availableAssignees = new();
    private Dictionary<string, bool> selectedAssignees = new();
    private string? agentAssignmentWarning = null;
    private readonly string[] agentLogins = { "copilot", "swe-copilot-agent", "github-copilot", "copilot-agent" };

    protected override async Task OnInitializedAsync()
    {
        SetupBreadcrumbs();
        
        if (AuthService.IsAuthenticated)
        {
            GitHubService.SetAuthentication(AuthService.CurrentToken!);
        }
        await LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        SetupBreadcrumbs();
        
        if (AuthService.IsAuthenticated)
        {
            GitHubService.SetAuthentication(AuthService.CurrentToken!);
        }
        if (!string.IsNullOrEmpty(Owner) && !string.IsNullOrEmpty(Repo))
        {
            await LoadData();
        }
    }

    private void SetupBreadcrumbs()
    {
        _breadcrumbItems = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/"),
            new BreadcrumbItem("Repositories", href: "/repositories"),
            new BreadcrumbItem($"{Owner}/{Repo}", href: null, disabled: true)
        };
    }

    private async Task LoadData()
    {
        await Task.WhenAll(LoadRepositoryInfo(), LoadIssues());
    }

    private async Task LoadRepositoryInfo()
    {
        try
        {
            repositoryInfo = await GitHubService.GetRepositoryAsync(Owner, Repo);
        }
        catch (Exception ex)
        {
            GitHubService.Logger?.LogError(ex, $"Error loading repository info for {Owner}/{Repo}: {ex.Message}");
        }
    }

    private async Task LoadIssues()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var result = await GitHubService.GetIssuesAsync(Owner, Repo);
            issues = result.ToList();
        }
        catch (Exception ex)
        {
            issues = new List<GitHubIssue>();
            
            // Check if this is an authentication error
            if (ex.Message.Contains("401") || ex.Message.Contains("Unauthorized"))
            {
                errorMessage = "Authentication required to view issues from this repository. Please configure your GitHub token in the Settings page.";
            }
            else if (ex.Message.Contains("404") || ex.Message.Contains("Not Found"))
            {
                errorMessage = "Repository not found. Please check the repository name and try again.";
            }
            else
            {
                errorMessage = $"Error loading issues: {ex.Message}";
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task CreateIssue()
    {
        if (string.IsNullOrWhiteSpace(newIssueTitle)) return;

        isCreatingIssue = true;
        StateHasChanged();

        try
        {
            var newIssue = await GitHubService.CreateIssueAsync(Owner, Repo, newIssueTitle, newIssueBody);
            issues.Insert(0, newIssue);
            CloseCreateIssueModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating issue: {ex.Message}");
        }
        finally
        {
            isCreatingIssue = false;
            StateHasChanged();
        }
    }

    private void CloseCreateIssueModal()
    {
        ShowCreateIssueModal = false;
        newIssueTitle = string.Empty;
        newIssueBody = string.Empty;
        StateHasChanged();
    }

    private static string GetContrastColor(string hexColor)
    {
        // Simple contrast calculation - could be improved
        if (hexColor.Length != 6) return "white";
        
        var r = Convert.ToInt32(hexColor.Substring(0, 2), 16);
        var g = Convert.ToInt32(hexColor.Substring(2, 2), 16);
        var b = Convert.ToInt32(hexColor.Substring(4, 2), 16);
        var brightness = ((r * 299) + (g * 587) + (b * 114)) / 1000;
        
        return brightness > 155 ? "black" : "white";
    }

    private async Task ShowAssignModal(GitHubIssue issue)
    {
        selectedIssue = issue;
        ShowAssignIssueModal = true;
        agentAssignmentWarning = null;
        selectedAssignees.Clear();
        
        // Check for agent assignments
        var hasAgentAssignment = await GitHubService.HasAgentAssignmentAsync(Owner, Repo, issue.Number, agentLogins);
        if (hasAgentAssignment)
        {
            agentAssignmentWarning = "This issue is currently assigned to an agent. Assigning additional users may interfere with automated processes.";
        }
        
        await LoadAvailableAssignees();
        StateHasChanged();
    }

    private async Task LoadAvailableAssignees()
    {
        isLoadingAssignees = true;
        StateHasChanged();

        try
        {
            var assignees = await GitHubService.GetAvailableAssigneesAsync(Owner, Repo);
            availableAssignees = assignees.ToList();
            
            // Initialize selection state based on current assignments
            selectedAssignees.Clear();
            foreach (var assignee in availableAssignees)
            {
                selectedAssignees[assignee.Login] = selectedIssue?.Assignees.Any(a => a.Login == assignee.Login) ?? false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading assignees: {ex.Message}");
        }
        finally
        {
            isLoadingAssignees = false;
            StateHasChanged();
        }
    }

    private async Task AssignIssue()
    {
        if (selectedIssue == null) return;

        var selectedUserLogins = selectedAssignees.Where(kvp => kvp.Value).Select(kvp => kvp.Key).ToList();

        isAssigningIssue = true;
        StateHasChanged();

        try
        {
            var updatedIssue = await GitHubService.AssignIssueAsync(Owner, Repo, selectedIssue.Number, selectedUserLogins);
            
            // Update the issue in the list
            var index = issues.FindIndex(i => i.Number == selectedIssue.Number);
            if (index >= 0)
            {
                issues[index] = updatedIssue;
            }
            
            CloseAssignModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error assigning issue: {ex.Message}");
        }
        finally
        {
            isAssigningIssue = false;
            StateHasChanged();
        }
    }

    private void CloseAssignModal()
    {
        ShowAssignIssueModal = false;
        selectedIssue = null;
        availableAssignees.Clear();
        selectedAssignees.Clear();
        agentAssignmentWarning = null;
        StateHasChanged();
    }
}