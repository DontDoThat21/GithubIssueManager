@using GitHubIssueManager.Maui.Models
@using GitHubIssueManager.Maui.Services
@inject GitHubService GitHubService

<div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title d-flex align-items-center">
                    <span class="me-2 text-primary">📋</span>
                    Create MCP Task for @Repository?.Name
                </h5>
            </div>
            <div class="modal-body">
                <div class="d-flex flex-column gap-3">
                    <div class="mb-3">
                        <label for="taskTitle" class="form-label">Task Title *</label>
                        <input type="text"
                               class="form-control"
                               id="taskTitle"
                               @bind="taskTitle"
                               @bind:event="oninput"
                               placeholder="Enter a descriptive title for the task..."
                               required />
                        <div class="form-text">A clear, concise title that describes the task</div>
                    </div>

                    <div class="mb-3">
                        <label for="taskDescription" class="form-label">Task Description</label>
                        <textarea class="form-control"
                                  id="taskDescription"
                                  rows="4"
                                  @bind="taskDescription"
                                  @bind:event="oninput"
                                  placeholder="Provide detailed instructions for the task..."></textarea>
                        <div class="form-text">Detailed description of what needs to be accomplished (supports Markdown)</div>
                    </div>

                    <div class="accordion" id="mcpPreviewAccordion">
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="mcpPreviewHeading">
                                <button class="accordion-button collapsed d-flex align-items-center"
                                        type="button"
                                        data-bs-toggle="collapse"
                                        data-bs-target="#mcpPreviewCollapse"
                                        aria-expanded="false"
                                        aria-controls="mcpPreviewCollapse">
                                    <span class="me-2">💻</span>
                                    MCP Metadata Preview
                                </button>
                            </h2>
                            <div id="mcpPreviewCollapse"
                                 class="accordion-collapse collapse"
                                 aria-labelledby="mcpPreviewHeading"
                                 data-bs-parent="#mcpPreviewAccordion">
                                <div class="accordion-body">
                                    <div class="mb-3">
                                        <label for="generatedJson" class="form-label">Generated MCP JSON</label>
                                        <textarea class="form-control font-monospace"
                                                  id="generatedJson"
                                                  rows="8"
                                                  readonly
                                                  value="@GetTaskJson()"></textarea>
                                        <div class="form-text">This JSON metadata will be included with the GitHub issue for MCP integration</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button"
                        class="btn btn-secondary d-flex align-items-center"
                        @onclick="Cancel">
                    <span class="me-2">❌</span>
                    Cancel
                </button>
                <button type="button"
                        class="btn btn-primary d-flex align-items-center"
                        @onclick="CreateTask"
                        disabled="@(string.IsNullOrWhiteSpace(taskTitle) || isCreating)">
                    @if (isCreating)
                    {
                        <div class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></div>
                        <span>Creating...</span>
                    }
                    else
                    {
                        <span class="me-2">➕</span>
                        <span>Create Task</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public GitHubRepository? Repository { get; set; }
    [Parameter] public EventCallback<object> OnDialogResult { get; set; }

    private string taskTitle = string.Empty;
    private string taskDescription = string.Empty;
    private string errorMessage = string.Empty;
    private bool isCreating = false;

    private async Task CreateTask()
    {
        if (Repository == null || string.IsNullOrWhiteSpace(taskTitle))
            return;

        isCreating = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var taskBody = GetFormattedIssueBody();
            var createdIssue = await GitHubService.CreateIssueAsync(Repository.Owner.Login, Repository.Name, taskTitle, taskBody);
            await OnDialogResult.InvokeAsync(createdIssue);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating task: {ex.Message}";
        }
        finally
        {
            isCreating = false;
            StateHasChanged();
        }
    }

    private async Task Cancel()
    {
        await OnDialogResult.InvokeAsync(null);
    }

    private string GetTaskJson()
    {
        var task = new
        {
            type = "task",
            title = taskTitle,
            description = taskDescription,
            status = "open",
            priority = "medium",
            created_at = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ssZ"),
            repository = Repository?.FullName ?? "",
            mcp_version = "1.0",
            metadata = new
            {
                github_issue = true,
                assignable = true,
                automated_workflow = false
            }
        };

        return System.Text.Json.JsonSerializer.Serialize(task, new System.Text.Json.JsonSerializerOptions
        {
            WriteIndented = true
        });
    }

    private string GetFormattedIssueBody()
    {
        var body = taskDescription ?? "";
        var createdDate = DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss");
        var repoName = Repository?.FullName ?? "";
        var jsonData = GetTaskJson().Replace("<!--", "").Replace("-->", "");

        var mcpMetadata = $@"

---

## 🔧 MCP Task Metadata

**Task Information:**
- **Type**: MCP Task
- **Status**: Open
- **Priority**: Medium
- **Created**: {createdDate} UTC
- **Repository**: {repoName}
- **MCP Version**: 1.0

**Integration Details:**
- ✅ GitHub Issue Integration
- ✅ Assignable to team members
- ✅ MCP-compatible metadata included

<!-- MCP-JSON-START
{jsonData}
MCP-JSON-END -->";

        return body + mcpMetadata;
    }
}