@page "/issues/{owner}/{repo}"
@using GitHubIssueManager.Maui.Models
@using GitHubIssueManager.Maui.Services
@inject GitHubService GitHubService
@inject AuthenticationService AuthService
@rendermode InteractiveServer

<PageTitle>Issues - @Owner/@Repo</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1>Issues</h1>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item"><a href="/repositories">Repositories</a></li>
                <li class="breadcrumb-item active">@Owner/@Repo</li>
            </ol>
        </nav>
    </div>
    <div>
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   StartIcon="Icons.Material.Filled.Add"
                   OnClick="() => ShowCreateIssueModal = true">
            New Issue
        </MudButton>
    </div>
</div>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading issues...</span>
        </div>
    </div>
}
else if (issues.Any())
{
    <div class="row">
        @foreach (var issue in issues)
        {
            <div class="col-12 mb-3">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="flex-grow-1">
                                <h5 class="card-title">
                                    <a href="@issue.HtmlUrl" target="_blank">#@issue.Number - @issue.Title</a>
                                    <span class="badge @(issue.State.ToLower() == "open" ? "bg-success" : "bg-danger") ms-2">
                                        @issue.State
                                    </span>
                                </h5>
                                <h6 class="card-subtitle mb-2 text-muted">
                                    by @issue.User.Login â€¢ @issue.CreatedAt.ToString("MMM dd, yyyy")
                                </h6>
                                
                                @if (!string.IsNullOrEmpty(issue.Body))
                                {
                                    <p class="card-text">
                                        @(issue.Body.Length > 200 ? issue.Body.Substring(0, 200) + "..." : issue.Body)
                                    </p>
                                }
                                
                                <div class="d-flex flex-wrap gap-1 mb-2">
                                    @foreach (var label in issue.Labels)
                                    {
                                        <span class="badge" style="background-color: #@label.Color; color: @GetContrastColor(label.Color)">
                                            @label.Name
                                        </span>
                                    }
                                </div>
                                
                                <div class="row text-muted small">
                                    <div class="col-auto">
                                        <i class="bi bi-chat"></i> @issue.Comments comments
                                    </div>
                                    @if (issue.Assignees.Any())
                                    {
                                        <div class="col-auto">
                                            <i class="bi bi-person"></i> 
                                            @string.Join(", ", issue.Assignees.Select(a => a.Login))
                                        </div>
                                    }
                                    @if (issue.Milestone != null)
                                    {
                                        <div class="col-auto">
                                            <i class="bi bi-flag"></i> @issue.Milestone.Title
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="ms-3">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ShowAssignModal(issue)">
                                    <i class="bi bi-person-plus"></i> Assign
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-warning">
        <h4>Error Loading Issues</h4>
        <p>@errorMessage</p>
        @if (errorMessage.Contains("Authentication"))
        {
            <a href="/settings" class="btn btn-primary">Go to Settings</a>
        }
    </div>
}
else
{
    <div class="alert alert-info">
        <h4>No Issues Found</h4>
        <p>This repository doesn't have any issues yet.</p>
        @if (AuthService.IsAuthenticated)
        {
            <button class="btn btn-primary" @onclick="() => ShowCreateIssueModal = true">
                <i class="bi bi-plus-circle"></i> Create First Issue
            </button>
        }
    </div>
}

<!-- Create Issue Modal -->
@if (ShowCreateIssueModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <MudIcon Icon="Icons.Material.Filled.Add" Style="margin-right: 8px;" />
                        Create New Issue
                    </h5>
                    <MudIconButton Icon="Icons.Material.Filled.Close" 
                                   Color="Color.Inherit" 
                                   Size="Size.Small" 
                                   OnClick="CloseCreateIssueModal" />
                </div>
                <div class="modal-body">
                    <div class="mb-4">
                        <MudTextField @bind-Value="newIssueTitle" 
                                      Label="Title" 
                                      Placeholder="Issue title..."
                                      Variant="Variant.Outlined"
                                      FullWidth="true"
                                      Required="true" />
                    </div>
                    <div class="mb-3">
                        <MudTextField @bind-Value="newIssueBody" 
                                      Label="Description" 
                                      Placeholder="Describe the issue..."
                                      Lines="6"
                                      Variant="Variant.Outlined"
                                      FullWidth="true" />
                    </div>
                </div>
                <div class="modal-footer">
                    <MudButton OnClick="CloseCreateIssueModal" 
                               Variant="Variant.Text"
                               Color="Color.Default">
                        Cancel
                    </MudButton>
                    <MudButton OnClick="CreateIssue" 
                               Variant="Variant.Filled" 
                               Color="Color.Primary" 
                               Disabled="@(string.IsNullOrWhiteSpace(newIssueTitle) || isCreatingIssue)">
                        @if (isCreatingIssue)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" Style="margin-right: 8px;" />
                        }
                        Create Issue
                    </MudButton>
                </div>
            </div>
        </div>
    </div>
}

<!-- Assign Issue Modal -->
@if (ShowAssignIssueModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Assign Issue #@selectedIssue?.Number</h5>
                    <button type="button" class="btn-close" @onclick="CloseAssignModal"></button>
                </div>
                <div class="modal-body">
                    @if (agentAssignmentWarning != null)
                    {
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle"></i> @agentAssignmentWarning
                        </div>
                    }
                    
                    <div class="mb-3">
                        <label class="form-label">Available Assignees</label>
                        @if (isLoadingAssignees)
                        {
                            <div class="text-center">
                                <div class="spinner-border spinner-border-sm" role="status">
                                    <span class="visually-hidden">Loading assignees...</span>
                                </div>
                            </div>
                        }
                        else if (availableAssignees.Any())
                        {
                            <div class="form-check-group">
                                @foreach (var assignee in availableAssignees)
                                {
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" 
                                               @bind="@selectedAssignees[assignee.Login]" 
                                               id="assignee-@assignee.Login">
                                        <label class="form-check-label" for="assignee-@assignee.Login">
                                            <img src="@assignee.AvatarUrl" alt="@assignee.Login" class="rounded-circle me-2" width="20" height="20">
                                            @assignee.Login
                                        </label>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <p class="text-muted">No assignees available.</p>
                        }
                    </div>
                    
                    @if (selectedIssue?.Assignees.Any() == true)
                    {
                        <div class="mb-3">
                            <label class="form-label">Currently Assigned</label>
                            <div class="d-flex flex-wrap gap-2">
                                @foreach (var assignee in selectedIssue.Assignees)
                                {
                                    <span class="badge bg-secondary">
                                        <img src="@assignee.AvatarUrl" alt="@assignee.Login" class="rounded-circle me-1" width="16" height="16">
                                        @assignee.Login
                                    </span>
                                }
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAssignModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="AssignIssue" disabled="@isAssigningIssue">
                        @if (isAssigningIssue)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Update Assignment
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string Owner { get; set; } = string.Empty;
    [Parameter] public string Repo { get; set; } = string.Empty;

    private List<GitHubIssue> issues = new();
    private bool isLoading = false;
    private string? errorMessage = null;
    private bool ShowCreateIssueModal = false;
    private bool isCreatingIssue = false;
    private string newIssueTitle = string.Empty;
    private string newIssueBody = string.Empty;

    // Assignment-related fields
    private bool ShowAssignIssueModal = false;
    private bool isLoadingAssignees = false;
    private bool isAssigningIssue = false;
    private GitHubIssue? selectedIssue = null;
    private List<GitHubUser> availableAssignees = new();
    private Dictionary<string, bool> selectedAssignees = new();
    private string? agentAssignmentWarning = null;
    private readonly string[] agentLogins = { "copilot", "swe-copilot-agent", "github-copilot", "copilot-agent" };

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.IsAuthenticated)
        {
            GitHubService.SetAuthentication(AuthService.CurrentToken!);
        }
        await LoadIssues();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (AuthService.IsAuthenticated)
        {
            GitHubService.SetAuthentication(AuthService.CurrentToken!);
        }
        if (!string.IsNullOrEmpty(Owner) && !string.IsNullOrEmpty(Repo))
        {
            await LoadIssues();
        }
    }

    private async Task LoadIssues()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var result = await GitHubService.GetIssuesAsync(Owner, Repo);
            issues = result.ToList();
        }
        catch (Exception ex)
        {
            issues = new List<GitHubIssue>();
            
            // Check if this is an authentication error
            if (ex.Message.Contains("401") || ex.Message.Contains("Unauthorized"))
            {
                errorMessage = "Authentication required to view issues from this repository. Please configure your GitHub token in the Settings page.";
            }
            else if (ex.Message.Contains("404") || ex.Message.Contains("Not Found"))
            {
                errorMessage = "Repository not found. Please check the repository name and try again.";
            }
            else
            {
                errorMessage = $"Error loading issues: {ex.Message}";
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task CreateIssue()
    {
        if (string.IsNullOrWhiteSpace(newIssueTitle)) return;

        isCreatingIssue = true;
        StateHasChanged();

        try
        {
            var newIssue = await GitHubService.CreateIssueAsync(Owner, Repo, newIssueTitle, newIssueBody);
            issues.Insert(0, newIssue);
            CloseCreateIssueModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating issue: {ex.Message}");
        }
        finally
        {
            isCreatingIssue = false;
            StateHasChanged();
        }
    }

    private void CloseCreateIssueModal()
    {
        ShowCreateIssueModal = false;
        newIssueTitle = string.Empty;
        newIssueBody = string.Empty;
        StateHasChanged();
    }

    private static string GetContrastColor(string hexColor)
    {
        // Simple contrast calculation - could be improved
        if (hexColor.Length != 6) return "white";
        
        var r = Convert.ToInt32(hexColor.Substring(0, 2), 16);
        var g = Convert.ToInt32(hexColor.Substring(2, 2), 16);
        var b = Convert.ToInt32(hexColor.Substring(4, 2), 16);
        var brightness = ((r * 299) + (g * 587) + (b * 114)) / 1000;
        
        return brightness > 155 ? "black" : "white";
    }

    private async Task ShowAssignModal(GitHubIssue issue)
    {
        selectedIssue = issue;
        ShowAssignIssueModal = true;
        agentAssignmentWarning = null;
        selectedAssignees.Clear();
        
        // Check for agent assignments
        var hasAgentAssignment = await GitHubService.HasAgentAssignmentAsync(Owner, Repo, issue.Number, agentLogins);
        if (hasAgentAssignment)
        {
            agentAssignmentWarning = "This issue is currently assigned to an agent. Assigning additional users may interfere with automated processes.";
        }
        
        await LoadAvailableAssignees();
        StateHasChanged();
    }

    private async Task LoadAvailableAssignees()
    {
        isLoadingAssignees = true;
        StateHasChanged();

        try
        {
            var assignees = await GitHubService.GetAvailableAssigneesAsync(Owner, Repo);
            availableAssignees = assignees.ToList();
            
            // Initialize selection state based on current assignments
            selectedAssignees.Clear();
            foreach (var assignee in availableAssignees)
            {
                selectedAssignees[assignee.Login] = selectedIssue?.Assignees.Any(a => a.Login == assignee.Login) ?? false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading assignees: {ex.Message}");
        }
        finally
        {
            isLoadingAssignees = false;
            StateHasChanged();
        }
    }

    private async Task AssignIssue()
    {
        if (selectedIssue == null) return;

        var selectedUserLogins = selectedAssignees.Where(kvp => kvp.Value).Select(kvp => kvp.Key).ToList();

        isAssigningIssue = true;
        StateHasChanged();

        try
        {
            var updatedIssue = await GitHubService.AssignIssueAsync(Owner, Repo, selectedIssue.Number, selectedUserLogins);
            
            // Update the issue in the list
            var index = issues.FindIndex(i => i.Number == selectedIssue.Number);
            if (index >= 0)
            {
                issues[index] = updatedIssue;
            }
            
            CloseAssignModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error assigning issue: {ex.Message}");
        }
        finally
        {
            isAssigningIssue = false;
            StateHasChanged();
        }
    }

    private void CloseAssignModal()
    {
        ShowAssignIssueModal = false;
        selectedIssue = null;
        availableAssignees.Clear();
        selectedAssignees.Clear();
        agentAssignmentWarning = null;
        StateHasChanged();
    }
}