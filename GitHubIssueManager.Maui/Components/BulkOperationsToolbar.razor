@using GitHubIssueManager.Maui.Models
@using GitHubIssueManager.Maui.Services
@inject GitHubService GitHubService
@inject ILogger<BulkOperationsToolbar> Logger
@rendermode InteractiveServer

@if (SelectedIssues.Any())
{
    <div class="card shadow-sm mb-3" style="border-left: 4px solid var(--bs-primary);">
        <div class="card-body py-3">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <i class="bi bi-check-circle text-primary me-2"></i>
                    <span class="fw-semibold">
                        @SelectedIssues.Count issue@(SelectedIssues.Count == 1 ? "" : "s") selected
                    </span>
                </div>
                
                <div class="d-flex gap-1">
                    <button type="button"
                            class="btn btn-link btn-sm text-secondary"
                            @onclick="ShowBulkAssignDialog">
                        <i class="bi bi-person-plus me-1"></i>
                        Assign
                    </button>
                    
                    <button type="button"
                            class="btn btn-link btn-sm text-warning"
                            @onclick="ShowBulkLabelDialog">
                        <i class="bi bi-tag me-1"></i>
                        Label
                    </button>
                    
                    <button type="button"
                            class="btn btn-link btn-sm text-danger"
                            @onclick="ShowBulkCloseDialog">
                        <i class="bi bi-x-circle me-1"></i>
                        Close
                    </button>
                    
                    <button type="button"
                            class="btn btn-link btn-sm text-danger"
                            @onclick="ShowBulkDeleteDialog">
                        <i class="bi bi-trash me-1"></i>
                        Delete
                    </button>
                    
                    <button type="button"
                            class="btn btn-link btn-sm text-success"
                            @onclick="ShowExportDialogModal">
                        <i class="bi bi-download me-1"></i>
                        Export
                    </button>
                    
                    <button type="button"
                            class="btn btn-link btn-sm text-secondary"
                            @onclick="ClearSelection">
                        <i class="bi bi-x-circle me-1"></i>
                        Clear
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Bulk Assign Dialog -->
@if (ShowAssignDialog)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Bulk Assign Issues</h5>
                    <button type="button" class="btn-close" @onclick="() => ShowAssignDialog = false"></button>
                </div>
                <div class="modal-body">
                    <p class="mb-3">
                        Assign @SelectedIssues.Count issue@(SelectedIssues.Count == 1 ? "" : "s") to the selected users.
                    </p>
                    
                    @if (isLoadingAssignees)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading assignees...</p>
                        </div>
                    }
                    else if (availableAssignees.Any())
                    {
                        <div class="d-flex flex-column gap-2">
                            @foreach (var assignee in availableAssignees)
                            {
                                <div class="d-flex align-items-center">
                                    <div class="form-check me-2">
                                        <input class="form-check-input" type="checkbox" 
                                               checked="@selectedAssignees[assignee.Login]"
                                               @onchange="@((ChangeEventArgs e) => selectedAssignees[assignee.Login] = (bool)e.Value!)" />
                                    </div>
                                    <img src="@assignee.AvatarUrl" alt="@assignee.Login" 
                                         class="rounded-circle me-2" width="24" height="24" />
                                    <span>@assignee.Login</span>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info" role="alert">
                            No assignees available for this repository.
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => ShowAssignDialog = false">
                        Cancel
                    </button>
                    <button type="button" 
                            class="btn btn-primary"
                            @onclick="BulkAssignIssues"
                            disabled="@(isBulkProcessing || !selectedAssignees.Any(kvp => kvp.Value))">
                        @if (isBulkProcessing)
                        {
                            <div class="spinner-border spinner-border-sm me-2" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                        Assign Issues
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Bulk Label Dialog -->
@if (ShowLabelDialog)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Bulk Label Issues</h5>
                    <button type="button" class="btn-close" @onclick="() => ShowLabelDialog = false"></button>
                </div>
                <div class="modal-body">
                    <p class="mb-3">
                        Add labels to @SelectedIssues.Count issue@(SelectedIssues.Count == 1 ? "" : "s").
                    </p>
                    
                    @if (isLoadingLabels)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading labels...</p>
                        </div>
                    }
                    else if (availableLabels.Any())
                    {
                        <div class="d-flex flex-column gap-2">
                            @foreach (var label in availableLabels)
                            {
                                <div class="d-flex align-items-center">
                                    <div class="form-check me-2">
                                        <input class="form-check-input" type="checkbox" 
                                               checked="@selectedLabels[label.Name]"
                                               @onchange="@((ChangeEventArgs e) => selectedLabels[label.Name] = (bool)e.Value!)" />
                                    </div>
                                    <span class="badge me-2" 
                                          style="background-color: #@label.Color; color: @GetContrastColor(label.Color)">
                                        @label.Name
                                    </span>
                                    @if (!string.IsNullOrWhiteSpace(label.Description))
                                    {
                                        <small class="text-muted">@label.Description</small>
                                    }
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info" role="alert">
                            No labels available for this repository.
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => ShowLabelDialog = false">
                        Cancel
                    </button>
                    <button type="button" 
                            class="btn btn-primary"
                            @onclick="BulkLabelIssues"
                            disabled="@(isBulkProcessing || !selectedLabels.Any(kvp => kvp.Value))">
                        @if (isBulkProcessing)
                        {
                            <div class="spinner-border spinner-border-sm me-2" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                        Add Labels
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Bulk Close Dialog -->
@if (ShowCloseDialog)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Bulk Close Issues</h5>
                    <button type="button" class="btn-close" @onclick="() => ShowCloseDialog = false"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning" role="alert">
                        <strong>Warning:</strong> This will close @SelectedIssues.Count issue@(SelectedIssues.Count == 1 ? "" : "s"). 
                        This action can be undone by reopening the issues individually.
                    </div>
                    
                    <p>Issues to be closed:</p>
                    <div style="max-height: 300px; overflow-y: auto;">
                        @foreach (var issue in SelectedIssues.Take(10))
                        {
                            <p class="mb-1">• #@issue.Number - @issue.Title</p>
                        }
                        @if (SelectedIssues.Count > 10)
                        {
                            <p class="text-muted">... and @(SelectedIssues.Count - 10) more</p>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => ShowCloseDialog = false">
                        Cancel
                    </button>
                    <button type="button" 
                            class="btn btn-danger"
                            @onclick="BulkCloseIssues"
                            disabled="@isBulkProcessing">
                        @if (isBulkProcessing)
                        {
                            <div class="spinner-border spinner-border-sm me-2" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                        Close Issues
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Bulk Delete Dialog -->
@if (ShowDeleteDialog)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-danger">
                        <i class="bi bi-exclamation-triangle text-danger me-2"></i>
                        Bulk Delete Issues
                    </h5>
                    <button type="button" class="btn-close" @onclick="() => ShowDeleteDialog = false"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-danger" role="alert">
                        <strong>Warning:</strong> This will delete @SelectedIssues.Count issue@(SelectedIssues.Count == 1 ? "" : "s"). 
                        GitHub doesn't support permanent deletion, so this will close the issues instead.
                    </div>
                    
                    <p>Issues to be deleted:</p>
                    <div style="max-height: 300px; overflow-y: auto;">
                        @foreach (var issue in SelectedIssues.Take(10))
                        {
                            <p class="mb-1">• #@issue.Number - @issue.Title</p>
                        }
                        @if (SelectedIssues.Count > 10)
                        {
                            <p class="text-muted">... and @(SelectedIssues.Count - 10) more</p>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => ShowDeleteDialog = false">
                        Cancel
                    </button>
                    <button type="button" 
                            class="btn btn-danger"
                            @onclick="BulkDeleteIssues"
                            disabled="@isBulkProcessing">
                        @if (isBulkProcessing)
                        {
                            <div class="spinner-border spinner-border-sm me-2" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                        Delete Issues
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Export Dialog -->
@if (ShowExportDialog)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Export Issues</h5>
                    <button type="button" class="btn-close" @onclick="() => ShowExportDialog = false"></button>
                </div>
                <div class="modal-body">
                    <p class="mb-3">
                        Export @SelectedIssues.Count selected issue@(SelectedIssues.Count == 1 ? "" : "s") to a file.
                    </p>
                    
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="exportFormat" id="csvFormat" 
                                   checked="@(exportFormat == "csv")" 
                                   @onchange="@(() => exportFormat = "csv")" />
                            <label class="form-check-label" for="csvFormat">
                                <i class="bi bi-table me-1"></i>
                                CSV Format
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="exportFormat" id="jsonFormat" 
                                   checked="@(exportFormat == "json")" 
                                   @onchange="@(() => exportFormat = "json")" />
                            <label class="form-check-label" for="jsonFormat">
                                <i class="bi bi-code me-1"></i>
                                JSON Format
                            </label>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Filename</label>
                        <input type="text" class="form-control" 
                               @bind="exportFilename" 
                               placeholder="issues-export" />
                        <div class="form-text">File extension will be added automatically</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => ShowExportDialog = false">
                        Cancel
                    </button>
                    <button type="button" 
                            class="btn btn-success"
                            @onclick="ExportIssues"
                            disabled="@(isBulkProcessing || string.IsNullOrWhiteSpace(exportFilename))">
                        @if (isBulkProcessing)
                        {
                            <div class="spinner-border spinner-border-sm me-2" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                        Export
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string Owner { get; set; } = string.Empty;
    [Parameter] public string Repo { get; set; } = string.Empty;
    [Parameter] public List<GitHubIssue> SelectedIssues { get; set; } = new();
    [Parameter] public EventCallback<List<GitHubIssue>> OnIssuesUpdated { get; set; }
    [Parameter] public EventCallback OnSelectionCleared { get; set; }

    // Dialog states
    private bool ShowAssignDialog = false;
    private bool ShowLabelDialog = false;
    private bool ShowCloseDialog = false;
    private bool ShowDeleteDialog = false;
    private bool ShowExportDialog = false;

    // Processing states
    private bool isBulkProcessing = false;
    private bool isLoadingAssignees = false;
    private bool isLoadingLabels = false;

    // Data
    private List<GitHubUser> availableAssignees = new();
    private List<GitHubLabel> availableLabels = new();
    private Dictionary<string, bool> selectedAssignees = new();
    private Dictionary<string, bool> selectedLabels = new();

    // Export settings
    private string exportFormat = "csv";
    private string exportFilename = "issues-export";

    private async Task ShowBulkAssignDialog()
    {
        ShowAssignDialog = true;
        selectedAssignees.Clear();
        await LoadAvailableAssignees();
    }

    private async Task ShowBulkLabelDialog()
    {
        ShowLabelDialog = true;
        selectedLabels.Clear();
        await LoadAvailableLabels();
    }

    private void ShowBulkCloseDialog()
    {
        ShowCloseDialog = true;
    }

    private void ShowBulkDeleteDialog()
    {
        ShowDeleteDialog = true;
    }

    private void ShowExportDialogModal()
    {
        ShowExportDialog = true;
        exportFilename = $"issues-export-{DateTime.Now:yyyy-MM-dd}";
    }

    private async Task LoadAvailableAssignees()
    {
        if (string.IsNullOrEmpty(Owner) || string.IsNullOrEmpty(Repo))
            return;

        isLoadingAssignees = true;
        StateHasChanged();

        try
        {
            var assignees = await GitHubService.GetAvailableAssigneesAsync(Owner, Repo);
            availableAssignees = assignees.ToList();
            
            selectedAssignees.Clear();
            foreach (var assignee in availableAssignees)
            {
                selectedAssignees[assignee.Login] = false;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading assignees");
        }
        finally
        {
            isLoadingAssignees = false;
            StateHasChanged();
        }
    }

    private async Task LoadAvailableLabels()
    {
        if (string.IsNullOrEmpty(Owner) || string.IsNullOrEmpty(Repo))
            return;

        isLoadingLabels = true;
        StateHasChanged();

        try
        {
            availableLabels = (await GitHubService.GetLabelsAsync(Owner, Repo))
                .Select(l => new GitHubLabel 
                { 
                    Id = l.Id, 
                    Name = l.Name, 
                    Color = l.Color, 
                    Description = l.Description,
                    IsDefault = false
                }).ToList();
            
            selectedLabels.Clear();
            foreach (var label in availableLabels)
            {
                selectedLabels[label.Name] = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading labels: {ex.Message}");
        }
        finally
        {
            isLoadingLabels = false;
            StateHasChanged();
        }
    }

    private async Task BulkAssignIssues()
    {
        var assigneesToAdd = selectedAssignees.Where(kvp => kvp.Value).Select(kvp => kvp.Key).ToList();
        if (!assigneesToAdd.Any()) return;

        isBulkProcessing = true;
        StateHasChanged();

        try
        {
            var issueNumbers = SelectedIssues.Select(i => i.Number);
            var updatedIssues = await GitHubService.BulkAssignIssuesAsync(Owner, Repo, issueNumbers, assigneesToAdd);
            
            await OnIssuesUpdated.InvokeAsync(updatedIssues);
            ShowAssignDialog = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in bulk assign: {ex.Message}");
        }
        finally
        {
            isBulkProcessing = false;
            StateHasChanged();
        }
    }

    private async Task BulkLabelIssues()
    {
        var labelsToAdd = selectedLabels.Where(kvp => kvp.Value).Select(kvp => kvp.Key).ToList();
        if (!labelsToAdd.Any()) return;

        isBulkProcessing = true;
        StateHasChanged();

        try
        {
            // Note: GitHub API doesn't have a bulk label endpoint, so we'd need to implement this
            // by updating each issue individually. For now, we'll simulate this.
            var updatedIssues = new List<GitHubIssue>();
            
            foreach (var issue in SelectedIssues)
            {
                try
                {
                    // In a real implementation, you'd call GitHubService.AddLabelsToIssueAsync
                    // For now, we'll just add the labels to the local issue objects
                    var newLabels = labelsToAdd.Where(l => !issue.Labels.Any(existing => existing.Name == l))
                                              .Select(l => 
                                              {
                                                  var availableLabel = availableLabels.First(al => al.Name == l);
                                                  return new GitHubLabel 
                                                  { 
                                                      Id = availableLabel.Id, 
                                                      Name = availableLabel.Name, 
                                                      Color = availableLabel.Color, 
                                                      Description = availableLabel.Description,
                                                      IsDefault = availableLabel.IsDefault
                                                  };
                                              })
                                              .ToList();
                    
                    issue.Labels.AddRange(newLabels);
                    updatedIssues.Add(issue);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error labeling issue #{issue.Number}: {ex.Message}");
                }
            }
            
            await OnIssuesUpdated.InvokeAsync(updatedIssues);
            ShowLabelDialog = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in bulk label: {ex.Message}");
        }
        finally
        {
            isBulkProcessing = false;
            StateHasChanged();
        }
    }

    private async Task BulkCloseIssues()
    {
        isBulkProcessing = true;
        StateHasChanged();

        try
        {
            var issueNumbers = SelectedIssues.Select(i => i.Number);
            var updatedIssues = await GitHubService.BulkCloseIssuesAsync(Owner, Repo, issueNumbers);
            
            await OnIssuesUpdated.InvokeAsync(updatedIssues);
            ShowCloseDialog = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in bulk close: {ex.Message}");
        }
        finally
        {
            isBulkProcessing = false;
            StateHasChanged();
        }
    }

    private async Task BulkDeleteIssues()
    {
        isBulkProcessing = true;
        StateHasChanged();

        try
        {
            var issueNumbers = SelectedIssues.Select(i => i.Number);
            var updatedIssues = await GitHubService.BulkDeleteIssuesAsync(Owner, Repo, issueNumbers);
            
            await OnIssuesUpdated.InvokeAsync(updatedIssues);
            ShowDeleteDialog = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in bulk delete: {ex.Message}");
        }
        finally
        {
            isBulkProcessing = false;
            StateHasChanged();
        }
    }

    private async Task ExportIssues()
    {
        if (string.IsNullOrWhiteSpace(exportFilename)) return;

        isBulkProcessing = true;
        StateHasChanged();

        try
        {
            var content = exportFormat switch
            {
                "csv" => GenerateCsvExport(),
                "json" => GenerateJsonExport(),
                _ => throw new ArgumentException("Invalid export format")
            };

            var filename = $"{exportFilename}.{exportFormat}";
            var bytes = System.Text.Encoding.UTF8.GetBytes(content);
            
            // In a browser context, we'd need to use JavaScript to download the file
            // For now, we'll log the content
            Logger.LogInformation($"Exporting {SelectedIssues.Count} issues to {filename}");
            Logger.LogInformation(content);
            
            ShowExportDialog = false;
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error exporting issues: {ex.Message}");
        }
        finally
        {
            isBulkProcessing = false;
            StateHasChanged();
        }
    }

    private string GenerateCsvExport()
    {
        var csv = new System.Text.StringBuilder();
        csv.AppendLine("Number,Title,State,Author,Assignees,Labels,Milestone,Created,Updated,URL");
        
        foreach (var issue in SelectedIssues)
        {
            var assignees = string.Join(";", issue.Assignees.Select(a => a.Login));
            var labels = string.Join(";", issue.Labels.Select(l => l.Name));
            var milestone = issue.Milestone?.Title ?? "";
            
            csv.AppendLine($"{issue.Number},\"{EscapeCsv(issue.Title)}\",{issue.State},{issue.User?.Login},\"{assignees}\",\"{labels}\",\"{milestone}\",{issue.CreatedAt:yyyy-MM-dd},{issue.UpdatedAt:yyyy-MM-dd},{issue.HtmlUrl}");
        }
        
        return csv.ToString();
    }

    private string GenerateJsonExport()
    {
        var exportData = new
        {
            exportedAt = DateTime.UtcNow,
            repository = $"{Owner}/{Repo}",
            totalIssues = SelectedIssues.Count,
            issues = SelectedIssues.Select(issue => new
            {
                number = issue.Number,
                title = issue.Title,
                body = issue.Body,
                state = issue.State,
                author = issue.User?.Login,
                assignees = issue.Assignees.Select(a => a.Login),
                labels = issue.Labels.Select(l => new { l.Name, l.Color }),
                milestone = issue.Milestone?.Title,
                created_at = issue.CreatedAt,
                updated_at = issue.UpdatedAt,
                closed_at = issue.ClosedAt,
                html_url = issue.HtmlUrl,
                comment_count = issue.CommentCount
            })
        };
        
        return System.Text.Json.JsonSerializer.Serialize(exportData, new System.Text.Json.JsonSerializerOptions 
        { 
            WriteIndented = true 
        });
    }

    private static string EscapeCsv(string value)
    {
        if (string.IsNullOrEmpty(value)) return value;
        return value.Replace("\"", "\"\"");
    }

    private void ClearSelection()
    {
        OnSelectionCleared.InvokeAsync();
    }

    private static string GetContrastColor(string hexColor)
    {
        if (hexColor.Length != 6) return "white";
        
        var r = Convert.ToInt32(hexColor.Substring(0, 2), 16);
        var g = Convert.ToInt32(hexColor.Substring(2, 2), 16);
        var b = Convert.ToInt32(hexColor.Substring(4, 2), 16);
        var brightness = ((r * 299) + (g * 587) + (b * 114)) / 1000;
        
        return brightness > 155 ? "black" : "white";
    }
}