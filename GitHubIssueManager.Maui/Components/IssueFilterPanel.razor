@using GitHubIssueManager.Maui.Models
@using GitHubIssueManager.Maui.Services
@inject IssueFilterService FilterService
@inject GitHubService GitHubService
@rendermode InteractiveServer
@implements IDisposable

<div class="card shadow-sm mb-4">
    <div class="card-body">
        <!-- Header -->
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="d-flex align-items-center">
                <i class="bi bi-funnel text-primary me-2"></i>
                <h6 class="mb-0">Advanced Filters</h6>
                @if (CurrentFilter.HasActiveFilters)
                {
                    <span class="badge bg-info ms-2">
                        @FilteredCount of @TotalCount issues
                    </span>
                }
            </div>
            
            <div class="d-flex gap-1">
                <button type="button" 
                        class="btn btn-link btn-sm text-secondary"
                        @onclick="RefreshData">
                    <i class="bi bi-arrow-clockwise me-1"></i>
                    Refresh
                </button>
                <button type="button" 
                        class="btn btn-link btn-sm text-warning"
                        @onclick="ClearFilters"
                        disabled="@(!CurrentFilter.HasActiveFilters)">
                    <i class="bi bi-x-circle me-1"></i>
                    Clear All
                </button>
                <button type="button" 
                        class="btn btn-link btn-sm"
                        @onclick="ToggleExpanded">
                    <i class="bi bi-@(IsExpanded ? "chevron-up" : "chevron-down")"></i>
                </button>
            </div>
        </div>

        <!-- Search Bar (Always Visible) -->
        <div class="mb-3">
            <div class="input-group">
                <span class="input-group-text">
                    <i class="bi bi-search"></i>
                </span>
                <input type="text" class="form-control" 
                       @bind="SearchQuery" 
                       @oninput="OnSearchChanged"
                       placeholder="Search by title, description, or assignee..." />
            </div>
        </div>

        <!-- Active Filters Display -->
        @if (CurrentFilter.HasActiveFilters)
        {
            <div class="d-flex flex-wrap gap-1 align-items-center mb-3">
                <small class="text-muted me-2">Active filters:</small>
                
                @if (CurrentFilter.State != IssueState.Open)
                {
                    <span class="badge bg-primary">
                        State: @CurrentFilter.State
                        <button type="button" class="btn-close btn-close-white ms-1" 
                                style="font-size: 0.6em;" @onclick="RemoveStateFilter"></button>
                    </span>
                }
                
                @foreach (var assignee in CurrentFilter.Assignees)
                {
                    <span class="badge bg-secondary">
                        Assignee: @assignee
                        <button type="button" class="btn-close btn-close-white ms-1" 
                                style="font-size: 0.6em;" @onclick="() => RemoveAssigneeFilter(assignee)"></button>
                    </span>
                }
                
                @foreach (var label in CurrentFilter.Labels)
                {
                    <span class="badge bg-info">
                        Label: @label
                        <button type="button" class="btn-close btn-close-white ms-1" 
                                style="font-size: 0.6em;" @onclick="() => RemoveLabelFilter(label)"></button>
                    </span>
                }
                
                @if (!string.IsNullOrWhiteSpace(CurrentFilter.Milestone))
                {
                    <span class="badge bg-success">
                        Milestone: @CurrentFilter.Milestone
                        <button type="button" class="btn-close btn-close-white ms-1" 
                                style="font-size: 0.6em;" @onclick="RemoveMilestoneFilter"></button>
                    </span>
                }
                
                @if (!string.IsNullOrWhiteSpace(CurrentFilter.Author))
                {
                    <span class="badge bg-warning text-dark">
                        Author: @CurrentFilter.Author
                        <button type="button" class="btn-close ms-1" 
                                style="font-size: 0.6em;" @onclick="RemoveAuthorFilter"></button>
                    </span>
                }

                @if (CurrentFilter.CreatedAfter.HasValue || CurrentFilter.CreatedBefore.HasValue)
                {
                    <span class="badge bg-danger">
                        @GetDateFilterText()
                        <button type="button" class="btn-close btn-close-white ms-1" 
                                style="font-size: 0.6em;" @onclick="RemoveDateFilter"></button>
                    </span>
                }
            </div>
        }

        <!-- Expanded Filters -->
        @if (IsExpanded)
        {
            <div class="border-top pt-3">
                <!-- Filter Row 1: State, Sort, and Quick Filters -->
                <div class="row mb-3">
                    <div class="col-md-3 col-sm-6 mb-2">
                        <label class="form-label">Issue State</label>
                        <select class="form-select form-select-sm" @bind="SelectedState" @bind:after="OnStateChanged">
                            <option value="@IssueState.Open">Open Issues</option>
                            <option value="@IssueState.Closed">Closed Issues</option>
                            <option value="@IssueState.All">All Issues</option>
                        </select>
                    </div>
                    <div class="col-md-3 col-sm-6 mb-2">
                        <label class="form-label">Sort By</label>
                        <select class="form-select form-select-sm" @bind="SelectedSortBy" @bind:after="OnSortChanged">
                            <option value="@IssueSortBy.Updated">Recently Updated</option>
                            <option value="@IssueSortBy.Created">Recently Created</option>
                            <option value="@IssueSortBy.Comments">Most Comments</option>
                            <option value="@IssueSortBy.Title">Title (A-Z)</option>
                        </select>
                    </div>
                    <div class="col-md-3 col-sm-6 mb-2">
                        <label class="form-label">Sort Direction</label>
                        <select class="form-select form-select-sm" @bind="SelectedSortDirection" @bind:after="OnSortChanged">
                            <option value="@AppSortDirection.Descending">Descending</option>
                            <option value="@AppSortDirection.Ascending">Ascending</option>
                        </select>
                    </div>
                    <div class="col-md-3 col-sm-6 mb-2">
                        <label class="form-label">Author</label>
                        <input type="text" class="form-control form-control-sm" 
                               @bind="AuthorQuery" 
                               @oninput="OnAuthorChanged"
                               placeholder="Filter by author..." />
                    </div>
                </div>

                <!-- Filter Row 2: Assignees and Labels -->
                <div class="row mb-3">
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Add Assignee Filter</label>
                        <input type="text" class="form-control form-control-sm" 
                               @bind="SelectedAssignee" 
                               @onkeypress="@((KeyboardEventArgs e) => { if (e.Key == "Enter") OnAssigneeSelected(); })"
                               placeholder="Type assignee name and press Enter..." />
                        
                        @if (CurrentFilter.Assignees.Any())
                        {
                            <div class="d-flex flex-wrap gap-1 mt-2">
                                @foreach (var assignee in CurrentFilter.Assignees)
                                {
                                    <span class="badge bg-secondary">
                                        @assignee
                                        <button type="button" class="btn-close btn-close-white ms-1" 
                                                style="font-size: 0.6em;" @onclick="() => RemoveAssigneeFilter(assignee)"></button>
                                    </span>
                                }
                            </div>
                        }
                    </div>
                    <div class="col-md-6 mb-3">
                        <label class="form-label">Add Label Filter</label>
                        <input type="text" class="form-control form-control-sm" 
                               @bind="SelectedLabel" 
                               @onkeypress="@((KeyboardEventArgs e) => { if (e.Key == "Enter") OnLabelSelected(); })"
                               placeholder="Type label name and press Enter..." />
                        
                        @if (CurrentFilter.Labels.Any())
                        {
                            <div class="d-flex flex-wrap gap-1 mt-2">
                                @foreach (var label in CurrentFilter.Labels)
                                {
                                    var labelColor = AvailableLabels.FirstOrDefault(l => l.Name == label)?.Color ?? "cccccc";
                                    <span class="badge" 
                                          style="background-color: #@labelColor; color: @GetContrastColor(labelColor)">
                                        @label
                                        <button type="button" class="btn-close ms-1" 
                                                style="font-size: 0.6em; filter: @(GetContrastColor(labelColor) == "white" ? "invert(1)" : "none");" 
                                                @onclick="() => RemoveLabelFilter(label)"></button>
                                    </span>
                                }
                            </div>
                        }
                    </div>
                </div>

                <!-- Filter Row 3: Milestone and Date Range -->
                <div class="row mb-3">
                    <div class="col-md-4 mb-2">
                        <label class="form-label">Milestone</label>
                        <input type="text" class="form-control form-control-sm" 
                               @bind="SelectedMilestone" 
                               @onkeypress="@((KeyboardEventArgs e) => { if (e.Key == "Enter") OnMilestoneSelected(); })"
                               placeholder="Type milestone and press Enter..." />
                    </div>
                    <div class="col-md-4 mb-2">
                        <label class="form-label">Created After</label>
                        <input type="date" class="form-control form-control-sm" 
                               value="@(CreatedAfter?.ToString("yyyy-MM-dd"))"
                               @onchange="OnCreatedAfterChanged" />
                    </div>
                    <div class="col-md-4 mb-2">
                        <label class="form-label">Created Before</label>
                        <input type="date" class="form-control form-control-sm" 
                               value="@(CreatedBefore?.ToString("yyyy-MM-dd"))"
                               @onchange="OnCreatedBeforeChanged" />
                    </div>
                </div>

                <!-- Saved Filters -->
                @if (SavedFilters.Any())
                {
                    <hr>
                    <div class="d-flex flex-wrap gap-2 align-items-center">
                        <h6 class="mb-0">Saved Filters:</h6>
                        @foreach (var savedFilter in SavedFilters.Take(3))
                        {
                            <button type="button" 
                                    class="btn btn-link btn-sm text-info"
                                    @onclick="() => FilterService.LoadSavedFilter(savedFilter.Id)">
                                @savedFilter.Name
                            </button>
                        }
                        <button type="button" 
                                class="btn btn-link btn-sm"
                                @onclick="ShowSaveFilterDialog">
                            <i class="bi bi-save me-1"></i>
                            Save Current
                        </button>
                    </div>
                }
            </div>
        }
    </div>
</div>

<!-- Save Filter Dialog -->
@if (ShowSaveDialog)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Save Filter</h5>
                    <button type="button" class="btn-close" @onclick="() => ShowSaveDialog = false"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Filter Name</label>
                        <input type="text" class="form-control" 
                               @bind="SaveFilterName" 
                               placeholder="Enter a name for this filter..." />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => ShowSaveDialog = false">
                        Cancel
                    </button>
                    <button type="button" 
                            class="btn btn-primary"
                            @onclick="SaveCurrentFilter"
                            disabled="@string.IsNullOrWhiteSpace(SaveFilterName)">
                        Save
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code  {
    [Parameter] public string Owner { get; set; } = string.Empty;
    [Parameter] public string Repo { get; set; } = string.Empty;
    [Parameter] public int TotalCount { get; set; }
    [Parameter] public int FilteredCount { get; set; }
    [Parameter] public EventCallback OnFilterChanged { get; set; }

    // UI State
    private bool IsExpanded = false;
    private bool ShowSaveDialog = false;
    private string SaveFilterName = string.Empty;

    // Filter UI bindings
    private string SearchQuery = string.Empty;
    private IssueState SelectedState = IssueState.Open;
    private IssueSortBy SelectedSortBy = IssueSortBy.Updated;
    private AppSortDirection SelectedSortDirection = AppSortDirection.Descending;
    private string AuthorQuery = string.Empty;
    private string SelectedAssignee = string.Empty;
    private string SelectedLabel = string.Empty;
    private string SelectedMilestone = string.Empty;
    private DateTime? CreatedAfter;
    private DateTime? CreatedBefore;

    // Data
    private List<GitHubUser> AvailableAssignees = new();
    private List<GitHubLabel> AvailableLabels = new();
    private List<GitHubMilestone> AvailableMilestones = new();
    private List<SavedFilter> SavedFilters = new();
    
    private IssueFilter CurrentFilter => FilterService.CurrentFilter;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to filter changes
        FilterService.FilterChanged += OnFilterServiceChanged;
        
        // Load initial data
        await LoadFilterData();
        LoadSavedFilters();
        
        // Initialize UI from current filter
        SyncUIFromFilter();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(Owner) && !string.IsNullOrEmpty(Repo))
        {
            await LoadFilterData();
        }
    }

    public void Dispose()
    {
        FilterService.FilterChanged -= OnFilterServiceChanged;
    }

    private async Task LoadFilterData()
    {
        if (string.IsNullOrEmpty(Owner) || string.IsNullOrEmpty(Repo))
            return;

        try
        {
            AvailableAssignees = (await GitHubService.GetAvailableAssigneesAsync(Owner, Repo)).ToList();
            AvailableLabels = (await GitHubService.GetLabelsAsync(Owner, Repo))
                .Select(l => new GitHubLabel 
                { 
                    Id = l.Id, 
                    Name = l.Name, 
                    Color = l.Color, 
                    Description = l.Description,
                    IsDefault = false
                }).ToList();
            AvailableMilestones = (await GitHubService.GetMilestonesAsync(Owner, Repo))
                .Select(m => new GitHubMilestone 
                { 
                    Id = m.Id, 
                    Title = m.Title, 
                    Description = m.Description, 
                    Number = m.Number, 
                    State = m.State, 
                    DueOn = m.DueOn, 
                    CreatedAt = m.CreatedAt, 
                    UpdatedAt = m.UpdatedAt 
                }).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading filter data: {ex.Message}");
        }
    }

    private void LoadSavedFilters()
    {
        SavedFilters = FilterService.GetSavedFilters().ToList();
    }

    private void SyncUIFromFilter()
    {
        SearchQuery = CurrentFilter.SearchQuery;
        SelectedState = CurrentFilter.State;
        SelectedSortBy = CurrentFilter.SortBy;
        SelectedSortDirection = CurrentFilter.SortDirection;
        AuthorQuery = CurrentFilter.Author ?? string.Empty;
        CreatedAfter = CurrentFilter.CreatedAfter;
        CreatedBefore = CurrentFilter.CreatedBefore;
        SelectedMilestone = CurrentFilter.Milestone ?? string.Empty;
    }

    private void OnFilterServiceChanged(IssueFilter filter)
    {
        SyncUIFromFilter();
        StateHasChanged();
        _ = OnFilterChanged.InvokeAsync();
    }

    private void UpdateFilter()
    {
        var filter = CurrentFilter.Clone();
        filter.SearchQuery = SearchQuery;
        filter.State = SelectedState;
        filter.SortBy = SelectedSortBy;
        filter.SortDirection = SelectedSortDirection;
        filter.Author = string.IsNullOrWhiteSpace(AuthorQuery) ? null : AuthorQuery;
        filter.CreatedAfter = CreatedAfter;
        filter.CreatedBefore = CreatedBefore;
        filter.Milestone = string.IsNullOrWhiteSpace(SelectedMilestone) ? null : SelectedMilestone;
        
        FilterService.UpdateFilter(filter);
    }

    // Event handlers
    private void OnSearchChanged() => UpdateFilter();
    private void OnStateChanged() => UpdateFilter();
    private void OnSortChanged() => UpdateFilter();
    private void OnAuthorChanged() => UpdateFilter();
    private void OnMilestoneSelected() => UpdateFilter();

    private void OnCreatedAfterChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var date))
        {
            CreatedAfter = date;
        }
        else
        {
            CreatedAfter = null;
        }
        UpdateFilter();
    }

    private void OnCreatedBeforeChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out var date))
        {
            CreatedBefore = date;
        }
        else
        {
            CreatedBefore = null;
        }
        UpdateFilter();
    }

    private void OnAssigneeSelected()
    {
        if (!string.IsNullOrWhiteSpace(SelectedAssignee) && !CurrentFilter.Assignees.Contains(SelectedAssignee))
        {
            var filter = CurrentFilter.Clone();
            filter.Assignees.Add(SelectedAssignee);
            FilterService.UpdateFilter(filter);
        }
        SelectedAssignee = string.Empty;
    }

    private void OnLabelSelected()
    {
        if (!string.IsNullOrWhiteSpace(SelectedLabel) && !CurrentFilter.Labels.Contains(SelectedLabel))
        {
            var filter = CurrentFilter.Clone();
            filter.Labels.Add(SelectedLabel);
            FilterService.UpdateFilter(filter);
        }
        SelectedLabel = string.Empty;
    }

    // Filter removal methods
    private void RemoveStateFilter()
    {
        SelectedState = IssueState.Open;
        UpdateFilter();
    }

    private void RemoveAssigneeFilter(string assignee)
    {
        var filter = CurrentFilter.Clone();
        filter.Assignees.Remove(assignee);
        FilterService.UpdateFilter(filter);
    }

    private void RemoveLabelFilter(string label)
    {
        var filter = CurrentFilter.Clone();
        filter.Labels.Remove(label);
        FilterService.UpdateFilter(filter);
    }

    private void RemoveMilestoneFilter()
    {
        SelectedMilestone = string.Empty;
        UpdateFilter();
    }

    private void RemoveAuthorFilter()
    {
        AuthorQuery = string.Empty;
        UpdateFilter();
    }

    private void RemoveDateFilter()
    {
        CreatedAfter = null;
        CreatedBefore = null;
        UpdateFilter();
    }

    private void ClearFilters()
    {
        FilterService.ResetFilter();
        SyncUIFromFilter();
    }

    private void ToggleExpanded()
    {
        IsExpanded = !IsExpanded;
    }

    private async Task RefreshData()
    {
        await LoadFilterData();
        await OnFilterChanged.InvokeAsync();
    }

    // Helper methods
    private string GetDateFilterText()
    {
        if (CurrentFilter.CreatedAfter.HasValue && CurrentFilter.CreatedBefore.HasValue)
            return $"Created: {CurrentFilter.CreatedAfter:MMM dd} - {CurrentFilter.CreatedBefore:MMM dd}";
        else if (CurrentFilter.CreatedAfter.HasValue)
            return $"Created after: {CurrentFilter.CreatedAfter:MMM dd, yyyy}";
        else if (CurrentFilter.CreatedBefore.HasValue)
            return $"Created before: {CurrentFilter.CreatedBefore:MMM dd, yyyy}";
        return "Date filter";
    }

    private static string GetContrastColor(string hexColor)
    {
        if (hexColor.Length != 6) return "white";
        
        var r = Convert.ToInt32(hexColor.Substring(0, 2), 16);
        var g = Convert.ToInt32(hexColor.Substring(2, 2), 16);
        var b = Convert.ToInt32(hexColor.Substring(4, 2), 16);
        var brightness = ((r * 299) + (g * 587) + (b * 114)) / 1000;
        
        return brightness > 155 ? "black" : "white";
    }

    // Save filter functionality
    private void ShowSaveFilterDialog()
    {
        ShowSaveDialog = true;
        SaveFilterName = string.Empty;
    }

    private async Task SaveCurrentFilter()
    {
        if (!string.IsNullOrWhiteSpace(SaveFilterName))
        {
            await FilterService.SaveFilterAsync(SaveFilterName);
            LoadSavedFilters();
            ShowSaveDialog = false;
            SaveFilterName = string.Empty;
        }
    }
}