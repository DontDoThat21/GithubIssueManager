@page "/repositories"
@using GitHubIssueManager.Maui.Models
@using GitHubIssueManager.Maui.Services
@inject GitHubService GitHubService
@inject RepositoryService RepositoryService
@inject AuthenticationService AuthService
@rendermode InteractiveServer

<PageTitle>Repositories</PageTitle>

<p>test123</p>

<!-- Repository Header Card -->
<div class="card mb-4" style="background: linear-gradient(135deg, #1e1e1e 0%, #2d2d2d 100%); color: white;">
    <div class="card-body p-4">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb mb-2" style="background: transparent;">
                <li class="breadcrumb-item"><a href="/" class="text-light">Home</a></li>
                <li class="breadcrumb-item active text-light" aria-current="page">Repositories</li>
            </ol>
        </nav>
        <hr class="border-light opacity-25" />
        <div class="d-flex align-items-center mb-2">
            <i class="bi bi-folder fs-2 text-primary me-2"></i>
            <h4 class="mb-0 text-white">GitHub Repositories</h4>
        </div>
        <p class="text-light opacity-75 mt-1 mb-0">Browse and manage your GitHub repositories.</p>
    </div>
</div>

<h3 class="mb-3">bGitHub Repositories</h3>

@if (!AuthService.IsAuthenticated)
{
    <div class="alert alert-warning" role="alert">
        <h6 class="alert-heading mb-2">Authentication Required</h6>
        <p class="mb-0">
            Please configure your GitHub token in the 
            <a href="/settings" class="alert-link">Settings</a> 
            page to access repositories.
        </p>
    </div>
}
else
{
    <div class="row mb-4">
        <div class="col-12 col-md-8 mb-3 mb-md-0">
            <div class="input-group">
                <input type="text" 
                       class="form-control" 
                       placeholder="Search repositories..." 
                       @bind="searchQuery" 
                       @onkeypress="OnSearchKeyPress" />
                <span class="input-group-text">
                    <i class="bi bi-search"></i>
                </span>
            </div>
        </div>
        <div class="col-12 col-md-4">
            <div class="d-flex gap-2">
                <button type="button" 
                        class="btn btn-primary btn-sm"
                        @onclick="SearchRepositories">
                    <i class="bi bi-search me-1"></i>
                    Search
                </button>
                <button type="button" 
                        class="btn btn-outline-primary btn-sm"
                        @onclick="LoadMyRepositories">
                    <i class="bi bi-folder me-1"></i>
                    My Repos
                </button>
            </div>
        </div>
    </div>

    @if (!isLoading && repositories.Any())
    {
        <p class="text-muted mb-4">
            @repositories.Count Repositor@(repositories.Count == 1 ? "Repositories" : "ies")
        </p>
    }

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 text-muted">Loading repositories...</p>
        </div>
    }
    else if (repositories.Any())
    {
        <div class="row repositories-grid">
            @foreach (var repo in repositories)
            {
                <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4">
                    <div class="card h-100 d-flex flex-column">
                        <div class="card-body flex-grow-1">
                            <div class="d-flex align-items-center mb-2">
                                <h6 class="card-title mb-0 me-2">
                                    <a href="/issues/@repo.Owner.Login/@repo.Name" class="text-decoration-none">
                                        @repo.Name
                                    </a>
                                </h6>
                                @if (repo.Private)
                                {
                                    <small class="text-muted">Private</small>
                                }
                            </div>
                            <p class="text-muted small mb-2">@repo.Owner.Login</p>
                            <p class="card-text small">@repo.Description</p>
                            
                            <div class="d-flex justify-content-between mt-2 mb-3">
                                <div class="d-flex gap-3">
                                    <small class="text-muted d-flex align-items-center">
                                        <i class="bi bi-star me-1"></i>
                                        @repo.StargazersCount
                                    </small>
                                    <small class="text-muted d-flex align-items-center">
                                        <i class="bi bi-diagram-2 me-1"></i>
                                        @repo.ForksCount
                                    </small>
                                    <a href="/issues/@repo.Owner.Login/@repo.Name" class="text-decoration-none d-flex align-items-center">
                                        <i class="bi bi-bug me-1"></i>
                                        <small>@repo.OpenIssuesCount</small>
                                    </a>
                                </div>
                            </div>
                            
                            @if (!string.IsNullOrEmpty(repo.Language))
                            {
                                <small class="text-primary">
                                    @repo.Language
                                </small>
                            }
                        </div>
                        <div class="card-footer bg-transparent">
                            <div class="d-flex flex-wrap gap-1">
                                @if (RepositoryService.IsWatched(repo.Id))
                                {
                                    <button type="button" 
                                            class="btn btn-outline-danger btn-sm"
                                            @onclick="() => RemoveFromWatchlist(repo)">
                                        <i class="bi bi-dash-circle me-1"></i>
                                        Remove
                                    </button>
                                    <a href="/issues/@repo.Owner.Login/@repo.Name" 
                                       class="btn btn-primary btn-sm">
                                        <i class="bi bi-bug me-1"></i>
                                        Issues
                                    </a>
                                }
                                else
                                {
                                    <button type="button" 
                                            class="btn btn-outline-primary btn-sm"
                                            @onclick="() => AddToWatchlist(repo)">
                                        <i class="bi bi-plus me-1"></i>
                                        Watch
                                    </button>
                                }
                                <a href="git-client://clone/?repo=@repo.HtmlUrl" 
                                   class="btn btn-outline-secondary btn-sm">
                                    <i class="bi bi-code me-1"></i>
                                    VS
                                </a>
                                <button type="button" 
                                        class="btn btn-success btn-sm"
                                        @onclick="() => ShowAddTaskModal(repo)">
                                    <i class="bi bi-plus me-1"></i>
                                    Task
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}

<!-- Demo cards for testing styling - Always show for now -->
@* <p class="text-muted mb-4"> *@
@*     3 Demo Repositories (Enhanced Border Testing) *@
@* </p> *@
@* <div class="row repositories-grid"> *@
@*     <!-- Demo Card 1 --> *@
@*     <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4"> *@
@*         <div class="card h-100 d-flex flex-column"> *@
@*             <div class="card-body flex-grow-1"> *@
@*                 <div class="d-flex align-items-center mb-2"> *@
@*                     <h6 class="card-title mb-0 me-2"> *@
@*                         <a href="#" class="text-decoration-none"> *@
@*                             ChromeVolumeController *@
@*                         </a> *@
@*                     </h6> *@
@*                     <small class="text-muted">Private</small> *@
@*                 </div> *@
@*                 <p class="text-muted small mb-2">DontDoThat21</p> *@
@*                 <p class="card-text small">A simple Chrome extension that allows you to control the volume of individual tabs from a convenient popup interface.</p> *@
@*                  *@
@*                 <div class="d-flex justify-content-between mt-2 mb-3"> *@
@*                     <div class="d-flex gap-3"> *@
@*                         <small class="text-muted d-flex align-items-center"> *@
@*                             <i class="bi bi-star me-1"></i> *@
@*                             0 *@
@*                         </small> *@
@*                         <small class="text-muted d-flex align-items-center"> *@
@*                             <i class="bi bi-diagram-2 me-1"></i> *@
@*                             0 *@
@*                         </small> *@
@*                         <a href="#" class="text-decoration-none d-flex align-items-center"> *@
@*                             <i class="bi bi-bug me-1"></i> *@
@*                             <small>2</small> *@
@*                         </a> *@
@*                     </div> *@
@*                 </div> *@
@*                  *@
@*                 <small class="text-primary"> *@
@*                     JavaScript *@
@*                 </small> *@
@*             </div> *@
@*             <div class="card-footer bg-transparent"> *@
@*                 <div class="d-flex flex-wrap gap-1"> *@
@*                     <button type="button"  *@
@*                             class="btn btn-outline-primary btn-sm"> *@
@*                         <i class="bi bi-plus me-1"></i> *@
@*                         Watch *@
@*                     </button> *@
@*                     <button type="button"  *@
@*                             class="btn btn-outline-secondary btn-sm"> *@
@*                         <i class="bi bi-code me-1"></i> *@
@*                         VS *@
@*                     </button> *@
@*                     <button type="button"  *@
@*                             class="btn btn-success btn-sm"> *@
@*                         <i class="bi bi-plus me-1"></i> *@
@*                         Task *@
@*                     </button> *@
@*                 </div> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@*     <!-- Demo Card 2 --> *@
@*     <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4"> *@
@*         <div class="card h-100 d-flex flex-column"> *@
@*             <div class="card-body flex-grow-1"> *@
@*                 <div class="d-flex align-items-center mb-2"> *@
@*                     <h6 class="card-title mb-0 me-2"> *@
@*                         <a href="#" class="text-decoration-none"> *@
@*                             chromiumBorderlessVideos *@
@*                         </a> *@
@*                     </h6> *@
@*                     <small class="text-muted">Private</small> *@
@*                 </div> *@
@*                 <p class="text-muted small mb-2">DontDoThat21</p> *@
@*                 <p class="card-text small">CleanVideo UI popups prioritizing less clutter</p> *@
@*                  *@
@*                 <div class="d-flex justify-content-between mt-2 mb-3"> *@
@*                     <div class="d-flex gap-3"> *@
@*                         <small class="text-muted d-flex align-items-center"> *@
@*                             <i class="bi bi-star me-1"></i> *@
@*                             0 *@
@*                         </small> *@
@*                         <small class="text-muted d-flex align-items-center"> *@
@*                             <i class="bi bi-diagram-2 me-1"></i> *@
@*                             0 *@
@*                         </small> *@
@*                         <a href="#" class="text-decoration-none d-flex align-items-center"> *@
@*                             <i class="bi bi-bug me-1"></i> *@
@*                             <small>1</small> *@
@*                         </a> *@
@*                     </div> *@
@*                 </div> *@
@*                  *@
@*                 <small class="text-primary"> *@
@*                     HTML *@
@*                 </small> *@
@*             </div> *@
@*             <div class="card-footer bg-transparent"> *@
@*                 <div class="d-flex flex-wrap gap-1"> *@
@*                     <button type="button"  *@
@*                             class="btn btn-outline-primary btn-sm"> *@
@*                         <i class="bi bi-plus me-1"></i> *@
@*                         Watch *@
@*                     </button> *@
@*                     <button type="button"  *@
@*                             class="btn btn-outline-secondary btn-sm"> *@
@*                         <i class="bi bi-code me-1"></i> *@
@*                         VS *@
@*                     </button> *@
@*                     <button type="button"  *@
@*                             class="btn btn-success btn-sm"> *@
@*                         <i class="bi bi-plus me-1"></i> *@
@*                         Task *@
@*                     </button> *@
@*                 </div> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@*     <!-- Demo Card 3 --> *@
@*     <div class="col-12 col-sm-6 col-md-4 col-lg-3 mb-4"> *@
@*         <div class="card h-100 d-flex flex-column"> *@
@*             <div class="card-body flex-grow-1"> *@
@*                 <h6 class="card-title mb-2"> *@
@*                     <a href="#" class="text-decoration-none"> *@
@*                         chromiumSearchEngineRedirect *@
@*                     </a> *@
@*                 </h6> *@
@*                 <p class="text-muted small mb-2">DontDoThat21</p> *@
@*                 <p class="card-text small">chromiumSearchEngineRedirect (maybe one day)</p> *@
@*                  *@
@*                 <div class="d-flex justify-content-between mt-2 mb-3"> *@
@*                     <div class="d-flex gap-3"> *@
@*                         <small class="text-muted d-flex align-items-center"> *@
@*                             <i class="bi bi-star me-1"></i> *@
@*                             0 *@
@*                         </small> *@
@*                         <small class="text-muted d-flex align-items-center"> *@
@*                             <i class="bi bi-diagram-2 me-1"></i> *@
@*                             0 *@
@*                         </small> *@
@*                         <a href="#" class="text-decoration-none d-flex align-items-center"> *@
@*                             <i class="bi bi-bug me-1"></i> *@
@*                             <small>0</small> *@
@*                         </a> *@
@*                     </div> *@
@*                 </div> *@
@*                  *@
@*                 <small class="text-primary"> *@
@*                     HTML *@
@*                 </small> *@
@*             </div> *@
@*             <div class="card-footer bg-transparent"> *@
@*                 <div class="d-flex flex-wrap gap-1"> *@
@*                     <button type="button"  *@
@*                             class="btn btn-outline-primary btn-sm"> *@
@*                         <i class="bi bi-plus me-1"></i> *@
@*                         Watch *@
@*                     </button> *@
@*                     <button type="button"  *@
@*                             class="btn btn-outline-secondary btn-sm"> *@
@*                         <i class="bi bi-code me-1"></i> *@
@*                         VS *@
@*                     </button> *@
@*                     <button type="button"  *@
@*                             class="btn btn-success btn-sm"> *@
@*                         <i class="bi bi-plus me-1"></i> *@
@*                         Task *@
@*                     </button> *@
@*                 </div> *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@* </div> *@

<!-- Modal for adding tasks -->
@if (showAddTaskModal && selectedRepository != null)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Task to @selectedRepository.Name</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddTaskModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="taskTitle" class="form-label">Task Title *</label>
                        <input type="text" 
                               class="form-control" 
                               id="taskTitle"
                               @bind="newTaskTitle" 
                               required />
                    </div>
                    
                    <div class="mb-3">
                        <label for="taskDescription" class="form-label">Task Description</label>
                        <textarea class="form-control" 
                                  id="taskDescription"
                                  rows="4"
                                  @bind="newTaskDescription"></textarea>
                    </div>
                    
                    <div class="mb-3">
                        <label for="taskJson" class="form-label">Task JSON (MCP Format)</label>
                        <textarea class="form-control" 
                                  id="taskJson"
                                  rows="6"
                                  readonly
                                  value="@GetTaskJson()"></textarea>
                        <div class="form-text">This JSON shows the MCP metadata that will be included with the GitHub issue.</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" 
                            class="btn btn-secondary"
                            @onclick="CloseAddTaskModal">
                        Cancel
                    </button>
                    <button type="button" 
                            class="btn btn-primary"
                            @onclick="CreateTask"
                            disabled="@(string.IsNullOrWhiteSpace(newTaskTitle) || isCreatingTask)">
                        @if (isCreatingTask)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </span>
                        }
                        Create Task
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<GitHubRepository> repositories = new();
    private string searchQuery = string.Empty;
    private bool isLoading = false;
    
    // Add Task Modal properties
    private bool showAddTaskModal = false;
    private bool isCreatingTask = false;
    private GitHubRepository? selectedRepository = null;
    private string newTaskTitle = string.Empty;
    private string newTaskDescription = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.IsAuthenticated)
        {
            GitHubService.SetAuthentication(AuthService.CurrentToken!);
            await LoadMyRepositories();
        }
    }

    private async Task SearchRepositories()
    {
        if (string.IsNullOrWhiteSpace(searchQuery)) return;

        isLoading = true;
        StateHasChanged();

        try
        {
            var results = await GitHubService.SearchRepositoriesAsync(searchQuery);
            repositories = results.ToList();
        }
        catch (Exception ex)
        {
            // Handle error - could add toast notification here
            Console.WriteLine($"Error searching repositories: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadMyRepositories()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var results = await GitHubService.GetRepositoriesAsync();
            var allRepos = results.ToList();
            
            // Filter by search query if one exists
            if (!string.IsNullOrWhiteSpace(searchQuery))
            {
                repositories = allRepos.Where(r => 
                    r.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                    (r.Description?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    r.Owner.Login.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                    .ToList();
            }
            else
            {
                repositories = allRepos;
            }
        }
        catch (Exception ex)
        {
            // Handle error - could add toast notification here
            Console.WriteLine($"Error loading repositories: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchRepositories();
        }
    }

    private void AddToWatchlist(GitHubRepository repository)
    {
        RepositoryService.AddRepository(repository);
        StateHasChanged();
    }

    private void RemoveFromWatchlist(GitHubRepository repository)
    {
        RepositoryService.RemoveRepository(repository.Id);
        StateHasChanged();
    }
    
    private void ShowAddTaskModal(GitHubRepository repository)
    {
        selectedRepository = repository;
        newTaskTitle = string.Empty;
        newTaskDescription = string.Empty;
        showAddTaskModal = true;
        StateHasChanged();
    }
    
    private void CloseAddTaskModal()
    {
        showAddTaskModal = false;
        selectedRepository = null;
        newTaskTitle = string.Empty;
        newTaskDescription = string.Empty;
        isCreatingTask = false;
        StateHasChanged();
    }
    
    private async Task CreateTask()
    {
        if (selectedRepository == null || string.IsNullOrWhiteSpace(newTaskTitle))
            return;
            
        isCreatingTask = true;
        StateHasChanged();
        
        try
        {
            var taskBody = GetFormattedIssueBody();
            await GitHubService.CreateIssueAsync(selectedRepository.Owner.Login, selectedRepository.Name, newTaskTitle, taskBody);
            CloseAddTaskModal();
            
            // Refresh the repository data to update issue count
            if (!string.IsNullOrWhiteSpace(searchQuery))
            {
                await SearchRepositories();
            }
            else
            {
                await LoadMyRepositories();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating task: {ex.Message}");
        }
        finally
        {
            isCreatingTask = false;
            StateHasChanged();
        }
    }
    
    private string GetTaskJson()
    {
        var task = new
        {
            type = "task",
            title = newTaskTitle,
            description = newTaskDescription,
            status = "open",
            priority = "medium",
            created_at = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ssZ"),
            repository = selectedRepository?.FullName ?? "",
            mcp_version = "1.0"
        };
        
        return System.Text.Json.JsonSerializer.Serialize(task, new System.Text.Json.JsonSerializerOptions 
        { 
            WriteIndented = true 
        });
    }
    
    private string GetFormattedIssueBody()
    {
        // Use the task description as the main body content
        var body = newTaskDescription ?? "";
        
        // Add MCP metadata in a structured, human-readable format
        var mcpMetadata = $@"

---

**Task Metadata (MCP v1.0)**
- **Type**: Task
- **Status**: Open  
- **Priority**: Medium
- **Created**: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC
- **Repository**: {selectedRepository?.FullName ?? ""}

<!-- MCP JSON: {GetTaskJson().Replace("<!--", "").Replace("-->", "")} -->";

        return body + mcpMetadata;
    }
}