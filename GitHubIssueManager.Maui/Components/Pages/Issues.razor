@page "/issues/{owner}/{repo}"
@using GitHubIssueManager.Maui.Models
@using GitHubIssueManager.Maui.Services
@using MudBlazor
@inject GitHubService GitHubService
@inject AuthenticationService AuthService
@inject RepositoryService RepositoryService
@rendermode InteractiveServer

<PageTitle>@Owner/@Repo - Issues</PageTitle>

<!-- Repository Detail Header Section -->
<MudPaper Elevation="2" Class="pa-4 mb-4" Style="background: linear-gradient(135deg, #1e1e1e 0%, #2d2d2d 100%);">
    <MudStack Spacing="1">
        <MudBreadcrumbs Separator="@Icons.Material.Filled.ChevronRight">
            <MudBreadcrumbItem Href="/">Home</MudBreadcrumbItem>
            <MudBreadcrumbItem Href="/repositories">Repositories</MudBreadcrumbItem>
            <MudBreadcrumbItem Disabled="true">@Owner/@Repo</MudBreadcrumbItem>
        </MudBreadcrumbs>
        <MudDivider />
        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
            <MudIcon Icon="@Icons.Material.Filled.Folder" Color="Color.Primary" Size="Size.Large" />
            <MudText Typo="Typo.h4" Color="Color.Default">@Owner/@Repo</MudText>
            @if (repositoryInfo != null && repositoryInfo.Private)
            {
                <MudChip T="string" Size="Size.Small" Color="Color.Warning" Text="Private" />
            }
        </MudStack>
        @if (repositoryInfo != null && !string.IsNullOrEmpty(repositoryInfo.Description))
        {
            <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mt-1">@repositoryInfo.Description</MudText>
        }
        <MudStack Row="true" Spacing="4" AlignItems="AlignItems.Center" Class="mt-3">
            @if (repositoryInfo != null)
            {
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                    <MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning" Size="Size.Small" />
                    <MudText Typo="Typo.body2">@repositoryInfo.StargazersCount</MudText>
                </MudStack>
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                    <MudIcon Icon="@Icons.Material.Filled.CallSplit" Color="Color.Info" Size="Size.Small" />
                    <MudText Typo="Typo.body2">@repositoryInfo.ForksCount</MudText>
                </MudStack>
                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                    <MudIcon Icon="@Icons.Material.Filled.BugReport" Color="Color.Error" Size="Size.Small" />
                    <MudText Typo="Typo.body2">@repositoryInfo.OpenIssuesCount Open Issues</MudText>
                </MudStack>
                @if (!string.IsNullOrEmpty(repositoryInfo.Language))
                {
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                        <MudIcon Icon="@Icons.Material.Filled.Code" Color="Color.Secondary" Size="Size.Small" />
                        <MudText Typo="Typo.body2">@repositoryInfo.Language</MudText>
                    </MudStack>
                }
                @if (RepositoryService.IsWatched(repositoryInfo.Id))
                {
                    <MudChip T="string" Size="Size.Small" Color="Color.Success" Icon="@Icons.Material.Filled.Visibility" Text="Watching" />
                }
            }
        </MudStack>
    </MudStack>
    <MudStack Row="true" Spacing="2" Class="mt-2">
        <MudButton Variant="Variant.Outlined" 
                   Color="Color.Primary" 
                   StartIcon="@Icons.Material.Filled.OpenInNew"
                   Href="@($"https://github.com/{Owner}/{Repo}")"
                   Target="_blank">
            View on GitHub
        </MudButton>
        <MudButton Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   StartIcon="@Icons.Material.Filled.Add"
                   OnClick="() => ShowCreateIssueModal = true">
            New Issue
        </MudButton>
    </MudStack>
</MudPaper>

<!-- Issues Content -->
@if (isLoading)
{
    <MudPaper Elevation="1" Class="pa-8">
        <MudStack AlignItems="AlignItems.Center" Spacing="3">
            <MudProgressCircular Size="Size.Large" Indeterminate="true" Color="Color.Primary" />
            <MudText Typo="Typo.h6">Loading issues...</MudText>
        </MudStack>
    </MudPaper>
}
else if (issues.Any())
{
    <MudStack Spacing="2">
        @foreach (var issue in issues)
        {
            var isCopilotAssigning = copilotAssigning.ContainsKey(issue.Number) && copilotAssigning[issue.Number];
            <MudPaper Elevation="1" Class="pa-4">
                <MudStack Spacing="2">
                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start">
                        <MudStack Spacing="1" Style="flex-grow: 1;">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                <MudText Typo="Typo.h6">
                                    <MudLink Href="@issue.HtmlUrl" Target="_blank" Color="Color.Primary">
                                        #@issue.Number @issue.Title
                                    </MudLink>
                                </MudText>
                                <MudChip Size="Size.Small" 
                                         Color="@(issue.State.ToLower() == "open" ? Color.Success : Color.Default)"
                                         T="string"
                                         Text="@issue.State" />
                            </MudStack>
                            
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                    <MudAvatar Size="Size.Small" Src="@issue.User.AvatarUrl" />
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">@issue.User.Login</MudText>
                                </MudStack>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                    opened @issue.CreatedAt.ToString("MMM dd, yyyy")
                                </MudText>
                                @if (issue.CommentCount > 0)
                                {
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                        <MudIcon Icon="@Icons.Material.Filled.Comment" Size="Size.Small" Color="Color.Secondary" />
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">@issue.CommentCount</MudText>
                                    </MudStack>
                                }
                            </MudStack>
                        </MudStack>
                        
                        <MudStack Row="true" Spacing="1">
                            <MudButton Size="Size.Small" 
                                       Variant="Variant.Outlined" 
                                       Color="Color.Secondary" 
                                       StartIcon="@Icons.Material.Filled.Edit"
                                       OnClick="() => ShowEditModal(issue)">
                                Edit
                            </MudButton>
                            <MudButton Size="Size.Small" 
                                       Variant="Variant.Outlined" 
                                       Color="Color.Primary" 
                                       StartIcon="@Icons.Material.Filled.PersonAdd"
                                       OnClick="() => ShowAssignModal(issue)">
                                Assign
                            </MudButton>
                            <MudButton Size="Size.Small"
                                       Variant="Variant.Outlined"
                                       Color="Color.Info"
                                       StartIcon="@Icons.Material.Filled.SmartToy"
                                       Disabled="@isCopilotAssigning"
                                       OnClick="() => AssignIssueToCopilotAsync(issue)">
                                @if (isCopilotAssigning)
                                {
                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Style="margin-right: 0.5rem;" />
                                }
                                Copilot
                            </MudButton>
                        </MudStack>
                    </MudStack>
                    
                    @if (!string.IsNullOrEmpty(issue.Body))
                    {
                        <MudText Typo="Typo.body2" Color="Color.Default" Class="mt-2">
                            @(issue.Body.Length > 200 ? issue.Body.Substring(0, 200) + "..." : issue.Body)
                        </MudText>
                    }
                    
                    @if (issue.Labels.Any())
                    {
                        <MudStack Row="true" Spacing="1" Class="mt-2" Wrap="Wrap.Wrap">
                            @foreach (var label in issue.Labels)
                            {
                                <MudChip T="string" Size="Size.Small" 
                                         Style="@($"background-color: #{label.Color}; color: {GetContrastColor(label.Color)}")"
                                         Text="@label.Name" />
                            }
                        </MudStack>
                    }
                    
                    @if (issue.Assignees.Any() || issue.Milestone != null)
                    {
                        <MudStack Row="true" Spacing="3" Class="mt-2" AlignItems="AlignItems.Center">
                            @if (issue.Assignees.Any())
                            {
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                    <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Small" Color="Color.Secondary" />
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                                        Assigned to @string.Join(", ", issue.Assignees.Select(a => a.Login))
                                    </MudText>
                                </MudStack>
                            }
                            @if (issue.Milestone != null)
                            {
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                    <MudIcon Icon="@Icons.Material.Filled.Flag" Size="Size.Small" Color="Color.Secondary" />
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">@issue.Milestone.Title</MudText>
                                </MudStack>
                            }
                        </MudStack>
                    }
                </MudStack>
            </MudPaper>
        }
    </MudStack>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <MudAlert Severity="@GetErrorSeverity(errorMessage)" Class="mb-4">
        <MudText Typo="Typo.h6" Class="mb-2">Unable to Load Issues</MudText>
        <MudText Class="mb-2">@errorMessage</MudText>
        
        @if (errorMessage.Contains("authentication") || errorMessage.Contains("token"))
        {
            <MudStack Row="true" Spacing="2" Class="mt-3">
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary" 
                           Href="/settings" 
                           StartIcon="@Icons.Material.Filled.Settings">
                    Configure Token
                </MudButton>
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Info" 
                           Href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token"
                           Target="_blank"
                           StartIcon="@Icons.Material.Filled.Help">
                    Token Help
                </MudButton>
            </MudStack>
        }
        else if (errorMessage.Contains("network") || errorMessage.Contains("connectivity") || errorMessage.Contains("DNS"))
        {
            <MudStack Spacing="2" Class="mt-3">
                <MudText Typo="Typo.body2" Color="Color.Info">
                    <strong>Troubleshooting steps:</strong>
                </MudText>
                <MudText Typo="Typo.body2">• Check your internet connection</MudText>
                <MudText Typo="Typo.body2">• Verify that api.github.com is accessible from your network</MudText>
                <MudText Typo="Typo.body2">• If behind a corporate firewall, contact your IT administrator</MudText>
                <MudText Typo="Typo.body2">• Try again later as GitHub services may be temporarily unavailable</MudText>
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Primary" 
                           OnClick="LoadData"
                           StartIcon="@Icons.Material.Filled.Refresh"
                           Class="mt-2">
                    Try Again
                </MudButton>
            </MudStack>
        }
        else if (errorMessage.Contains("not found") || errorMessage.Contains("Repository"))
        {
            <MudStack Row="true" Spacing="2" Class="mt-3">
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Primary" 
                           Href="/repositories" 
                           StartIcon="@Icons.Material.Filled.Search">
                    Browse Repositories
                </MudButton>
                <MudButton Variant="Variant.Outlined" 
                           Color="Color.Info" 
                           OnClick="LoadData"
                           StartIcon="@Icons.Material.Filled.Refresh">
                    Retry
                </MudButton>
            </MudStack>
        }
        else
        {
            <MudButton Variant="Variant.Outlined" 
                       Color="Color.Primary" 
                       OnClick="LoadData"
                       StartIcon="@Icons.Material.Filled.Refresh"
                       Class="mt-2">
                Try Again
            </MudButton>
        }
    </MudAlert>
}
else
{
    <MudPaper Elevation="1" Class="pa-6">
        <MudStack AlignItems="AlignItems.Center" Spacing="3">
            <MudIcon Icon="@Icons.Material.Filled.BugReport" Size="Size.Large" Color="Color.Secondary" />
            <MudText Typo="Typo.h6">No Issues Found</MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary" Align="Align.Center">
                This repository doesn't have any issues yet.
            </MudText>
            @if (AuthService.IsAuthenticated)
            {
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary" 
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="() => ShowCreateIssueModal = true">
                    Create First Issue
                </MudButton>
            }
        </MudStack>
    </MudPaper>
}

<!-- Create Issue Modal with MCP Task Payload -->
<MudDialog @bind-Visible="ShowCreateIssueModal" Options="@(new DialogOptions { MaxWidth = MaxWidth.Large })">
    <DialogContent>
        <MudStack Spacing="3">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudIcon Icon="@Icons.Material.Filled.Add" Color="Color.Primary" />
                <MudText Typo="Typo.h6">Create MCP Task Issue for @Owner/@Repo</MudText>
            </MudStack>
            
            <!-- Task Title -->
            <MudTextField @bind-Value="newIssueTitle" 
                          Label="Task Title" 
                          Placeholder="Brief description of the task..."
                          Variant="Variant.Outlined"
                          FullWidth="true"
                          Required="true"
                          HelperText="Enter a concise title that summarizes the task" />
            
            <!-- Task Description -->
            <MudTextField @bind-Value="newIssueBody" 
                          Label="Task Description" 
                          Placeholder="Provide a detailed description of the task to be performed..."
                          Lines="6"
                          Variant="Variant.Outlined"
                          FullWidth="true"
                          HelperText="Describe the task requirements, expected outcome, and any relevant context" />
                          
            <!-- Task Priority -->
            <MudSelect @bind-Value="taskPriority" 
                       Label="Priority" 
                       Variant="Variant.Outlined"
                       HelperText="Select the priority level for this task">
                <MudSelectItem Value="@("low")">Low</MudSelectItem>
                <MudSelectItem Value="@("medium")">Medium</MudSelectItem>
                <MudSelectItem Value="@("high")">High</MudSelectItem>
                <MudSelectItem Value="@("urgent")">Urgent</MudSelectItem>
            </MudSelect>
            
            <!-- Task Type -->
            <MudSelect @bind-Value="taskType" 
                       Label="Task Type" 
                       Variant="Variant.Outlined"
                       HelperText="Specify the type of task">
                <MudSelectItem Value="@("task")">General Task</MudSelectItem>
                <MudSelectItem Value="@("bug")">Bug Fix</MudSelectItem>
                <MudSelectItem Value="@("feature")">Feature Request</MudSelectItem>
                <MudSelectItem Value="@("enhancement")">Enhancement</MudSelectItem>
                <MudSelectItem Value="@("documentation")">Documentation</MudSelectItem>
                <MudSelectItem Value="@("research")">Research</MudSelectItem>
            </MudSelect>

            <!-- MCP JSON Preview -->
            <MudExpansionPanels>
                <MudExpansionPanel Icon="@Icons.Material.Filled.Code" Text="MCP JSON Payload Preview">
                    <MudPaper Elevation="1" Class="pa-3" Style="background-color: #f5f5f5; font-family: monospace; font-size: 0.875rem; white-space: pre-wrap; overflow-x: auto;">
@GetTaskJson()
                    </MudPaper>
                </MudExpansionPanel>
            </MudExpansionPanels>
            
            <!-- MCP Information -->
            <MudAlert Severity="Severity.Info" Dense="true">
                <MudText Typo="Typo.body2">
                    <strong>Model Context Protocol (MCP) Integration:</strong> This issue will include structured MCP metadata 
                    for AI assistant integration. The JSON payload above will be embedded in the issue description for 
                    automated processing by compatible AI systems.
                </MudText>
            </MudAlert>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseCreateIssueModal" 
                   Variant="Variant.Text">
            Cancel
        </MudButton>
        <MudButton OnClick="CreateIssue" 
                   Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   Disabled="@(string.IsNullOrWhiteSpace(newIssueTitle) || isCreatingIssue)">
            @if (isCreatingIssue)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" Style="margin-right: 8px;" />
            }
            Create MCP Task Issue
        </MudButton>
    </DialogActions>
</MudDialog>

<!-- Assign Issue Modal -->
<MudDialog @bind-Visible="ShowAssignIssueModal" Options="@(new DialogOptions { MaxWidth = MaxWidth.Medium })">
    <DialogContent>
        <MudStack Spacing="3">
            <MudText Typo="Typo.h6">Assign Issue #@selectedIssue?.Number</MudText>
            
            @if (agentAssignmentWarning != null)
            {
                <MudAlert Severity="Severity.Warning" Dense="true">
                    <MudText Typo="Typo.body2">@agentAssignmentWarning</MudText>
                </MudAlert>
            }
            
            <MudText Typo="Typo.subtitle1">Available Assignees</MudText>
            
            @if (isLoadingAssignees)
            {
                <MudStack AlignItems="AlignItems.Center" Class="py-4">
                    <MudProgressCircular Size="Size.Medium" Indeterminate="true" />
                    <MudText Typo="Typo.body2">Loading assignees...</MudText>
                </MudStack>
            }
            else if (availableAssignees.Any())
            {
                <MudStack Spacing="2">
                    @foreach (var assignee in availableAssignees)
                    {
                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                            <MudCheckBox @bind-Value="@selectedAssignees[assignee.Login]" 
                                         Color="Color.Primary" />
                            <MudAvatar Size="Size.Small" Src="@assignee.AvatarUrl" />
                            <MudText Typo="Typo.body1">@assignee.Login</MudText>
                        </MudStack>
                    }
                </MudStack>
            }
            else
            {
                <MudAlert Severity="Severity.Info" Dense="true">
                    <MudText Typo="Typo.body2">No assignees available for this repository.</MudText>
                </MudAlert>
            }
            
            @if (selectedIssue?.Assignees.Any() == true)
            {
                <MudDivider />
                <MudText Typo="Typo.subtitle2">Currently Assigned</MudText>
                <MudStack Row="true" Spacing="2" Wrap="Wrap.Wrap">
                    @foreach (var assignee in selectedIssue.Assignees)
                    {
                        <MudChip T="string" Size="Size.Small" Color="Color.Primary">
                            <MudAvatar Size="Size.Small" Src="@assignee.AvatarUrl" Style="margin-right: 0.25rem;" />
                            @assignee.Login
                        </MudChip>
                    }
                </MudStack>
            }
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseAssignModal" Variant="Variant.Text">
            Cancel
        </MudButton>
        <MudButton OnClick="AssignIssue" 
                   Variant="Variant.Filled" 
                   Color="Color.Primary" 
                   Disabled="@isAssigningIssue">
            @if (isAssigningIssue)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" Style="margin-right: 0.5rem;" />
            }
            Update Assignment
        </MudButton>
    </DialogActions>
</MudDialog>

<!-- Edit Issue Modal -->
<MudDialog @bind-Visible="ShowEditIssueModal" Options="@(new DialogOptions { MaxWidth = MaxWidth.Large })">
    <DialogContent>
        <MudStack Spacing="3">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudIcon Icon="@Icons.Material.Filled.Edit" Color="Color.Secondary" />
                <MudText Typo="Typo.h6">Edit Issue #@selectedIssue?.Number</MudText>
            </MudStack>
            
            <!-- Issue Title -->
            <MudTextField @bind-Value="editIssueTitle" 
                          Label="Issue Title" 
                          Placeholder="Enter issue title..."
                          Variant="Variant.Outlined"
                          FullWidth="true"
                          Required="true"
                          HelperText="Brief title that describes the issue" />
            
            <!-- Issue Description -->
            <MudTextField @bind-Value="editIssueBody" 
                          Label="Issue Description" 
                          Placeholder="Provide a detailed description of the issue..."
                          Lines="8"
                          Variant="Variant.Outlined"
                          FullWidth="true"
                          HelperText="Detailed description of the issue (supports Markdown)" />
            
            @if (!string.IsNullOrEmpty(editErrorMessage))
            {
                <MudAlert Severity="Severity.Error" Dense="true">
                    <MudText Typo="Typo.body2">@editErrorMessage</MudText>
                </MudAlert>
            }
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseEditModal" 
                   Variant="Variant.Text">
            Cancel
        </MudButton>
        <MudButton OnClick="SaveEditedIssue" 
                   Variant="Variant.Filled" 
                   Color="Color.Secondary" 
                   Disabled="@(string.IsNullOrWhiteSpace(editIssueTitle) || isEditingIssue)">
            @if (isEditingIssue)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" Style="margin-right: 8px;" />
            }
            Save Changes
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public string Owner { get; set; } = string.Empty;
    [Parameter] public string Repo { get; set; } = string.Empty;

    private List<GitHubIssue> issues = new();
    private GitHubRepository? repositoryInfo = null;
    private bool isLoading = false;
    private string? errorMessage = null;
    private bool ShowCreateIssueModal = false;
    private bool isCreatingIssue = false;
    private string newIssueTitle = string.Empty;
    private string newIssueBody = string.Empty;

    // MCP Task-specific fields
    private string taskPriority = "medium";
    private string taskType = "task";

    // Breadcrumb items
    private List<BreadcrumbItem> _breadcrumbItems = new();

    // Assignment-related fields
    private bool ShowAssignIssueModal = false;
    private bool isLoadingAssignees = false;
    private bool isAssigningIssue = false;
    private GitHubIssue? selectedIssue = null;
    private List<GitHubUser> availableAssignees = new();
    private Dictionary<string, bool> selectedAssignees = new();
    private string? agentAssignmentWarning = null;
    private readonly string[] agentLogins = { "copilot", "swe-copilot-agent", "github-copilot", "copilot-agent" };

    // Track copilot assignment loading state per issue
    private Dictionary<long, bool> copilotAssigning = new();

    // Edit issue-related fields
    private bool ShowEditIssueModal = false;
    private bool isEditingIssue = false;
    private string editIssueTitle = string.Empty;
    private string editIssueBody = string.Empty;
    private string? editErrorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        SetupBreadcrumbs();
        
        if (AuthService.IsAuthenticated)
        {
            GitHubService.SetAuthentication(AuthService.CurrentToken!);
        }
        await LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        SetupBreadcrumbs();
        
        if (AuthService.IsAuthenticated)
        {
            GitHubService.SetAuthentication(AuthService.CurrentToken!);
        }
        if (!string.IsNullOrEmpty(Owner) && !string.IsNullOrEmpty(Repo))
        {
            await LoadData();
        }
    }

    private void SetupBreadcrumbs()
    {
        _breadcrumbItems = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/"),
            new BreadcrumbItem("Repositories", href: "/repositories"),
            new BreadcrumbItem($"{Owner}/{Repo}", href: null, disabled: true)
        };
    }

    private async Task LoadData()
    {
        await Task.WhenAll(LoadRepositoryInfo(), LoadIssues());
    }

    private async Task LoadRepositoryInfo()
    {
        try
        {
            repositoryInfo = await GitHubService.GetRepositoryAsync(Owner, Repo);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading repository info for {Owner}/{Repo}: {ex.Message}");
        }
    }

    private async Task LoadIssues()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var result = await GitHubService.GetIssuesAsync(Owner, Repo);
            issues = result.ToList();
        }
        catch (UnauthorizedAccessException authEx)
        {
            issues = new List<GitHubIssue>();
            errorMessage = authEx.Message;
        }
        catch (ArgumentException argEx)
        {
            issues = new List<GitHubIssue>();
            errorMessage = argEx.Message;
        }
        catch (TimeoutException timeoutEx)
        {
            issues = new List<GitHubIssue>();
            errorMessage = timeoutEx.Message;
        }
        catch (InvalidOperationException opEx)
        {
            issues = new List<GitHubIssue>();
            errorMessage = opEx.Message;
        }
        catch (Exception ex)
        {
            issues = new List<GitHubIssue>();
            
            // Fallback for any other unexpected errors
            if (ex.Message.Contains("DNS") || ex.Message.Contains("proxy") || ex.Message.Contains("network"))
            {
                errorMessage = "Network connectivity issue detected. Please check your internet connection and ensure GitHub API access is not blocked by your network or firewall. If you're behind a corporate network, contact your IT administrator.";
            }
            else
            {
                errorMessage = $"An unexpected error occurred while loading issues: {ex.Message}";
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task CreateIssue()
    {
        if (string.IsNullOrWhiteSpace(newIssueTitle)) return;

        isCreatingIssue = true;
        StateHasChanged();

        try
        {
            var taskBody = GetFormattedIssueBody();
            var newIssue = await GitHubService.CreateIssueAsync(Owner, Repo, newIssueTitle, taskBody);
            issues.Insert(0, newIssue);
            CloseCreateIssueModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating issue: {ex.Message}");
        }
        finally
        {
            isCreatingIssue = false;
            StateHasChanged();
        }
    }

    private void CloseCreateIssueModal()
    {
        ShowCreateIssueModal = false;
        newIssueTitle = string.Empty;
        newIssueBody = string.Empty;
        taskPriority = "medium";
        taskType = "task";
        StateHasChanged();
    }
    
    private string GetTaskJson()
    {
        var task = new
        {
            type = taskType,
            title = newIssueTitle,
            description = newIssueBody,
            status = "open",
            priority = taskPriority,
            created_at = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ssZ"),
            repository = $"{Owner}/{Repo}",
            mcp_version = "1.0",
            metadata = new
            {
                created_by = "GitHubIssueManager",
                integration = "MCP",
                automation_ready = true
            }
        };
        
        return System.Text.Json.JsonSerializer.Serialize(task, new System.Text.Json.JsonSerializerOptions 
        { 
            WriteIndented = true 
        });
    }
    
    private string GetFormattedIssueBody()
    {
        // Use the task description as the main body content
        var body = newIssueBody ?? "";
        
        // Add MCP metadata in a structured, human-readable format
        var mcpMetadata = $@"
---

**MCP Task Metadata (v1.0)**
- **Type**: {ToTitleCase(taskType)}
- **Priority**: {ToTitleCase(taskPriority)}
- **Status**: Open  
- **Created**: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC
- **Repository**: {Owner}/{Repo}
- **MCP Ready**: ✅ Automation Compatible

<!-- MCP_JSON_START
{GetTaskJson()}
MCP_JSON_END -->";

        return body + mcpMetadata;
    }

    private static string ToTitleCase(string input)
    {
        if (string.IsNullOrEmpty(input))
            return input;
            
        return char.ToUpper(input[0]) + input[1..].ToLower();
    }

    private static string GetContrastColor(string hexColor)
    {
        // Simple contrast calculation - could be improved
        if (hexColor.Length != 6) return "white";
        
        var r = Convert.ToInt32(hexColor.Substring(0, 2), 16);
        var g = Convert.ToInt32(hexColor.Substring(2, 2), 16);
        var b = Convert.ToInt32(hexColor.Substring(4, 2), 16);
        var brightness = ((r * 299) + (g * 587) + (b * 114)) / 1000;
        
        return brightness > 155 ? "black" : "white";
    }

    private async Task ShowAssignModal(GitHubIssue issue)
    {
        selectedIssue = issue;
        ShowAssignIssueModal = true;
        agentAssignmentWarning = null;
        selectedAssignees.Clear();
        
        // Check for agent assignments
        var hasAgentAssignment = await GitHubService.HasAgentAssignmentAsync(Owner, Repo, issue.Number, agentLogins);
        if (hasAgentAssignment)
        {
            agentAssignmentWarning = "This issue is currently assigned to an agent. Assigning additional users may interfere with automated processes.";
        }
        
        await LoadAvailableAssignees();
        StateHasChanged();
    }

    private async Task LoadAvailableAssignees()
    {
        isLoadingAssignees = true;
        StateHasChanged();

        try
        {
            var assignees = await GitHubService.GetAvailableAssigneesAsync(Owner, Repo);
            availableAssignees = assignees.ToList();
            
            // Initialize selection state based on current assignments
            selectedAssignees.Clear();
            foreach (var assignee in availableAssignees)
            {
                selectedAssignees[assignee.Login] = selectedIssue?.Assignees.Any(a => a.Login == assignee.Login) ?? false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading assignees: {ex.Message}");
        }
        finally
        {
            isLoadingAssignees = false;
            StateHasChanged();
        }
    }

    private async Task AssignIssue()
    {
        if (selectedIssue == null) return;

        var selectedUserLogins = selectedAssignees.Where(kvp => kvp.Value).Select(kvp => kvp.Key).ToList();

        isAssigningIssue = true;
        StateHasChanged();

        try
        {
            var updatedIssue = await GitHubService.AssignIssueAsync(Owner, Repo, selectedIssue.Number, selectedUserLogins);
            
            // Update the issue in the list
            var index = issues.FindIndex(i => i.Number == selectedIssue.Number);
            if (index >= 0)
            {
                issues[index] = updatedIssue;
            }
            
            CloseAssignModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error assigning issue: {ex.Message}");
        }
        finally
        {
            isAssigningIssue = false;
            StateHasChanged();
        }
    }

    private void CloseAssignModal()
    {
        ShowAssignIssueModal = false;
        selectedIssue = null;
        availableAssignees.Clear();
        selectedAssignees.Clear();
        agentAssignmentWarning = null;
        StateHasChanged();
    }

    private void ShowEditModal(GitHubIssue issue)
    {
        selectedIssue = issue;
        editIssueTitle = issue.Title;
        editIssueBody = issue.Body ?? string.Empty;
        editErrorMessage = null;
        ShowEditIssueModal = true;
        StateHasChanged();
    }

    private async Task SaveEditedIssue()
    {
        if (selectedIssue == null || string.IsNullOrWhiteSpace(editIssueTitle))
            return;

        isEditingIssue = true;
        editErrorMessage = null;
        StateHasChanged();

        try
        {
            var updatedIssue = await GitHubService.UpdateIssueAsync(Owner, Repo, selectedIssue.Number, editIssueTitle, editIssueBody);
            
            // Update the issue in the list
            var index = issues.FindIndex(i => i.Number == selectedIssue.Number);
            if (index >= 0)
            {
                issues[index] = updatedIssue;
            }
            
            CloseEditModal();
        }
        catch (Exception ex)
        {
            editErrorMessage = $"Failed to update issue: {ex.Message}";
            Console.WriteLine($"Error updating issue: {ex.Message}");
        }
        finally
        {
            isEditingIssue = false;
            StateHasChanged();
        }
    }

    private void CloseEditModal()
    {
        ShowEditIssueModal = false;
        selectedIssue = null;
        editIssueTitle = string.Empty;
        editIssueBody = string.Empty;
        editErrorMessage = null;
        StateHasChanged();
    }

    private enum ErrorType
    {
        AuthenticationError,
        NotFoundError,
        NetworkError,
        GeneralError
    }

    private static readonly Dictionary<ErrorType, Severity> ErrorSeverityMap = new()
    {
        { ErrorType.AuthenticationError, Severity.Warning },
        { ErrorType.NotFoundError, Severity.Info },
        { ErrorType.NetworkError, Severity.Error },
        { ErrorType.GeneralError, Severity.Warning }
    };

    private static ErrorType CategorizeError(string errorMessage)
    {
        if (errorMessage.Contains("authentication") || errorMessage.Contains("token") || errorMessage.Contains("Unauthorized"))
        {
            return ErrorType.AuthenticationError;
        }
        else if (errorMessage.Contains("not found") || errorMessage.Contains("Repository"))
        {
            return ErrorType.NotFoundError;
        }
        else if (errorMessage.Contains("network") || errorMessage.Contains("connectivity") || errorMessage.Contains("DNS"))
        {
            return ErrorType.NetworkError;
        }
        else
        {
            return ErrorType.GeneralError;
        }
    }

    private static Severity GetErrorSeverity(string errorMessage)
    {
        var errorType = CategorizeError(errorMessage);
        return ErrorSeverityMap[errorType];
    }

    private async Task AssignIssueToCopilotAsync(GitHubIssue issue)
    {
        if (issue == null) return;
        copilotAssigning[issue.Number] = true;
        StateHasChanged();
        try
        {
            var updatedIssue = await GitHubService.AssignIssueToCopilotAsync(Owner, Repo, issue.Number);
            var index = issues.FindIndex(i => i.Number == issue.Number);
            if (index >= 0)
            {
                issues[index] = updatedIssue;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error assigning issue to Copilot: {ex.Message}");
        }
        finally
        {
            copilotAssigning[issue.Number] = false;
            StateHasChanged();
        }
    }
}