@page "/repositories"
@using GitHubIssueManager.Maui.Models
@using GitHubIssueManager.Maui.Services
@inject GitHubService GitHubService
@inject RepositoryService RepositoryService
@inject AuthenticationService AuthService
@rendermode InteractiveServer

<PageTitle>Repositories</PageTitle>

<h1>GitHub Repositories</h1>

@if (!AuthService.IsAuthenticated)
{
    <div class="alert alert-warning">
        <h4>Authentication Required</h4>
        <p>Please configure your GitHub token in the <a href="/settings">Settings</a> page to access repositories.</p>
    </div>
}
else
{
    <div class="mb-3">
        <div class="row">
            <div class="col-md-8">
                <input @bind="searchQuery" @onkeypress="OnSearchKeyPress" class="form-control" placeholder="Search repositories..." />
            </div>
            <div class="col-md-4">
                <button class="btn btn-primary" @onclick="SearchRepositories">Search</button>
                <button class="btn btn-secondary ms-2" @onclick="LoadMyRepositories">My Repos</button>
            </div>
        </div>
    </div>

    @if (!isLoading && repositories.Any())
    {
        <div class="mb-3">
            <span class="badge bg-info">@repositories.Count Repository@(repositories.Count == 1 ? "" : "s")</span>
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (repositories.Any())
    {
        <div class="row">
            @foreach (var repo in repositories)
            {
                <div class="col-md-6 col-lg-4 mb-3">
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="card-title">
                                <a href="@repo.HtmlUrl" target="_blank">@repo.Name</a>
                                @if (repo.Private)
                                {
                                    <span class="badge bg-secondary ms-1">Private</span>
                                }
                            </h5>
                            <h6 class="card-subtitle mb-2 text-muted">@repo.Owner.Login</h6>
                            <p class="card-text">@repo.Description</p>
                            <div class="row text-muted small mb-2">
                                <div class="col">
                                    <i class="bi bi-star"></i> @repo.StargazersCount Stars
                                </div>
                                <div class="col">
                                    <i class="bi bi-diagram-3"></i> @repo.ForksCount Forks
                                </div>
                                <div class="col">
                                    <a href="/issues/@repo.Owner.Login/@repo.Name" class="text-decoration-none">
                                        <i class="bi bi-exclamation-circle"></i> @repo.OpenIssuesCount Issues
                                    </a>
                                </div>
                            </div>
                            @if (!string.IsNullOrEmpty(repo.Language))
                            {
                                <div class="mb-2">
                                    <span class="badge bg-info">@repo.Language</span>
                                </div>
                            }
                        </div>
                        <div class="card-footer">
                            @if (RepositoryService.IsWatched(repo.Id))
                            {
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveFromWatchlist(repo)">
                                    Remove from Watchlist
                                </button>
                                <a href="/issues/@repo.Owner.Login/@repo.Name" class="btn btn-sm btn-primary ms-2">
                                    View Issues
                                </a>
                            }
                            else
                            {
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => AddToWatchlist(repo)">
                                    Add to Watchlist
                                </button>
                            }
                            <button class="btn btn-sm btn-success ms-2" @onclick="() => ShowAddTaskModal(repo)">
                                <i class="bi bi-plus-circle"></i> Add Task
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else if (!isLoading)
    {
        <div class="alert alert-info">
            <p>No repositories found. Use the search box above to find repositories or click "My Repos" to load your repositories.</p>
        </div>
    }
}

<!-- Add Task Modal -->
@if (showAddTaskModal)
{
    <div class="modal d-block" tabindex="-1" role="dialog" aria-modal="true" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Task to @selectedRepository?.Name</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseAddTaskModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="taskTitle" class="form-label">Task Title *</label>
                        <input @bind="newTaskTitle" class="form-control" id="taskTitle" placeholder="Enter task title..." />
                    </div>
                    <div class="mb-3">
                        <label for="taskDescription" class="form-label">Task Description</label>
                        <textarea @bind="newTaskDescription" class="form-control" id="taskDescription" rows="4" placeholder="Enter task description..."></textarea>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Task JSON (MCP Format)</label>
                        <textarea class="form-control" rows="6" readonly>@GetTaskJson()</textarea>
                        <small class="form-text text-muted">This JSON shows the MCP metadata that will be included with the GitHub issue.</small>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddTaskModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="CreateTask" disabled="@(string.IsNullOrWhiteSpace(newTaskTitle) || isCreatingTask)">
                        @if (isCreatingTask)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Create Task
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<GitHubRepository> repositories = new();
    private string searchQuery = string.Empty;
    private bool isLoading = false;
    
    // Add Task Modal properties
    private bool showAddTaskModal = false;
    private bool isCreatingTask = false;
    private GitHubRepository? selectedRepository = null;
    private string newTaskTitle = string.Empty;
    private string newTaskDescription = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.IsAuthenticated)
        {
            GitHubService.SetAuthentication(AuthService.CurrentToken!);
            await LoadMyRepositories();
        }
    }

    private async Task SearchRepositories()
    {
        if (string.IsNullOrWhiteSpace(searchQuery)) return;

        isLoading = true;
        StateHasChanged();

        try
        {
            var results = await GitHubService.SearchRepositoriesAsync(searchQuery);
            repositories = results.ToList();
        }
        catch (Exception ex)
        {
            // Handle error - could add toast notification here
            Console.WriteLine($"Error searching repositories: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadMyRepositories()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var results = await GitHubService.GetRepositoriesAsync();
            var allRepos = results.ToList();
            
            // Filter by search query if one exists
            if (!string.IsNullOrWhiteSpace(searchQuery))
            {
                repositories = allRepos.Where(r => 
                    r.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                    (r.Description?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
                    r.Owner.Login.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                    .ToList();
            }
            else
            {
                repositories = allRepos;
            }
        }
        catch (Exception ex)
        {
            // Handle error - could add toast notification here
            Console.WriteLine($"Error loading repositories: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchRepositories();
        }
    }

    private void AddToWatchlist(GitHubRepository repository)
    {
        RepositoryService.AddRepository(repository);
        StateHasChanged();
    }

    private void RemoveFromWatchlist(GitHubRepository repository)
    {
        RepositoryService.RemoveRepository(repository.Id);
        StateHasChanged();
    }
    
    private void ShowAddTaskModal(GitHubRepository repository)
    {
        selectedRepository = repository;
        newTaskTitle = string.Empty;
        newTaskDescription = string.Empty;
        showAddTaskModal = true;
        StateHasChanged();
    }
    
    private void CloseAddTaskModal()
    {
        showAddTaskModal = false;
        selectedRepository = null;
        newTaskTitle = string.Empty;
        newTaskDescription = string.Empty;
        isCreatingTask = false;
        StateHasChanged();
    }
    
    private async Task CreateTask()
    {
        if (selectedRepository == null || string.IsNullOrWhiteSpace(newTaskTitle))
            return;
            
        isCreatingTask = true;
        StateHasChanged();
        
        try
        {
            var taskBody = GetFormattedIssueBody();
            await GitHubService.CreateIssueAsync(selectedRepository.Owner.Login, selectedRepository.Name, newTaskTitle, taskBody);
            CloseAddTaskModal();
            
            // Refresh the repository data to update issue count
            if (!string.IsNullOrWhiteSpace(searchQuery))
            {
                await SearchRepositories();
            }
            else
            {
                await LoadMyRepositories();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating task: {ex.Message}");
        }
        finally
        {
            isCreatingTask = false;
            StateHasChanged();
        }
    }
    
    private string GetTaskJson()
    {
        var task = new
        {
            type = "task",
            title = newTaskTitle,
            description = newTaskDescription,
            status = "open",
            priority = "medium",
            created_at = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ssZ"),
            repository = selectedRepository?.FullName ?? "",
            mcp_version = "1.0"
        };
        
        return System.Text.Json.JsonSerializer.Serialize(task, new System.Text.Json.JsonSerializerOptions 
        { 
            WriteIndented = true 
        });
    }
    
    private string GetFormattedIssueBody()
    {
        // Use the task description as the main body content
        var body = newTaskDescription ?? "";
        
        // Add MCP metadata in a structured, human-readable format
        var mcpMetadata = $@"

---

**Task Metadata (MCP v1.0)**
- **Type**: Task
- **Status**: Open  
- **Priority**: Medium
- **Created**: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC
- **Repository**: {selectedRepository?.FullName ?? ""}

<!-- MCP JSON: {GetTaskJson().Replace("<!--", "").Replace("-->", "")} -->";

        return body + mcpMetadata;
    }
}