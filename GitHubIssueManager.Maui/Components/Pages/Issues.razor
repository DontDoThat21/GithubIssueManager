@page "/issues/{owner}/{repo}"
@using GitHubIssueManager.Maui.Models
@using GitHubIssueManager.Maui.Services
@inject GitHubService GitHubService
@inject AuthenticationService AuthService
@inject RepositoryService RepositoryService
@inject IssueFilterService FilterService
@rendermode InteractiveServer

<PageTitle>@Owner/@Repo - Issues</PageTitle>

<!-- Repository Detail Header Section -->
<div class="card shadow-sm mb-4" style="background: linear-gradient(135deg, #1e1e1e 0%, #2d2d2d 100%); color: white;">
    <div class="card-body p-4">
        <!-- Breadcrumbs -->
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb text-light mb-2">
                <li class="breadcrumb-item"><a href="/" class="text-light">Home</a></li>
                <li class="breadcrumb-item"><a href="/repositories" class="text-light">Repositories</a></li>
                <li class="breadcrumb-item active text-secondary" aria-current="page">@Owner/@Repo</li>
            </ol>
        </nav>
        <hr class="border-secondary">
        
        <!-- Repository Title -->
        <div class="d-flex align-items-center mb-2">
            <i class="bi bi-folder text-primary fs-2 me-2"></i>
            <h4 class="mb-0 text-white">@Owner/@Repo</h4>
            @if (repositoryInfo != null && repositoryInfo.Private)
            {
                <span class="badge bg-warning text-dark ms-2">Private</span>
            }
        </div>
        
        @if (repositoryInfo != null && !string.IsNullOrEmpty(repositoryInfo.Description))
        {
            <p class="text-secondary mt-2">@repositoryInfo.Description</p>
        }
        
        <!-- Repository Stats -->
        <div class="d-flex flex-wrap gap-4 align-items-center mt-3">
            @if (repositoryInfo != null)
            {
                <div class="d-flex align-items-center">
                    <i class="bi bi-star text-warning me-1"></i>
                    <small class="text-light">@repositoryInfo.StargazersCount</small>
                </div>
                <div class="d-flex align-items-center">
                    <i class="bi bi-diagram-3 text-info me-1"></i>
                    <small class="text-light">@repositoryInfo.ForksCount</small>
                </div>
                <div class="d-flex align-items-center">
                    <i class="bi bi-bug text-danger me-1"></i>
                    <small class="text-light">@repositoryInfo.OpenIssuesCount Open Issues</small>
                </div>
                @if (!string.IsNullOrEmpty(repositoryInfo.Language))
                {
                    <div class="d-flex align-items-center">
                        <i class="bi bi-code text-secondary me-1"></i>
                        <small class="text-light">@repositoryInfo.Language</small>
                    </div>
                }
                @if (RepositoryService.IsWatched(repositoryInfo.Id))
                {
                    <span class="badge bg-success">
                        <i class="bi bi-eye me-1"></i>Watching
                    </span>
                }
            }
        </div>
        
        <!-- Action Buttons -->
        <div class="d-flex gap-2 mt-3">
            <a href="@($"https://github.com/{Owner}/{Repo}")" 
               target="_blank" 
               class="btn btn-outline-primary">
                <i class="bi bi-box-arrow-up-right me-1"></i>
                View on GitHub
            </a>
            <button type="button" 
                    class="btn btn-primary"
                    @onclick="OpenCreateIssueModal">
                <i class="bi bi-plus me-1"></i>
                New Issue
            </button>
        </div>
    </div>
</div>

<!-- Advanced Filter Panel -->
<IssueFilterPanel Owner="@Owner" 
                  Repo="@Repo" 
                  TotalCount="@allIssues.Count"
                  FilteredCount="@filteredIssues.Count"
                  OnFilterChanged="OnFilterChanged" />

<!-- Bulk Operations Toolbar -->
<BulkOperationsToolbar Owner="@Owner"
                       Repo="@Repo"
                       SelectedIssues="@selectedIssues"
                       OnIssuesUpdated="OnBulkIssuesUpdated"
                       OnSelectionCleared="ClearSelection" />

<!-- Issues Content -->
@if (isLoading)
{
    <div class="card">
        <div class="card-body text-center py-5">
            <div class="spinner-border text-primary mb-3" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <h6>Loading issues...</h6>
        </div>
    </div>
}
else if (filteredIssues.Any())
{
    <div class="d-flex flex-column gap-3">
        @foreach (var issue in filteredIssues)
        {
            var isCopilotAssigning = copilotAssigning.ContainsKey(issue.Number) && copilotAssigning[issue.Number];
            var isSelected = selectedIssues.Any(s => s.Number == issue.Number);
            
            <div class="card" style="@(isSelected ? "border-left: 4px solid var(--bs-primary);" : "")">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="d-flex align-items-start flex-grow-1">
                            <!-- Selection Checkbox -->
                            <div class="form-check me-3 mt-1">
                                <input class="form-check-input" type="checkbox" 
                                       checked="@isSelected"
                                       @onchange="@((ChangeEventArgs e) => ToggleIssueSelection(issue, (bool)e.Value!))" />
                            </div>
                            
                            <div class="flex-grow-1">
                                <!-- Issue Title and State -->
                                <div class="d-flex align-items-center mb-2">
                                    <h6 class="mb-0 me-2">
                                        <a href="@issue.HtmlUrl" target="_blank" class="text-decoration-none">
                                            #@issue.Number @issue.Title
                                        </a>
                                    </h6>
                                    <span class="badge @(issue.State.ToLower() == "open" ? "bg-success" : "bg-secondary")">
                                        @issue.State
                                    </span>
                                </div>
                                
                                <!-- Issue Meta -->
                                <div class="d-flex align-items-center gap-3 mb-2">
                                    <div class="d-flex align-items-center">
                                        <img src="@issue.User.AvatarUrl" alt="@issue.User.Login" 
                                             class="rounded-circle me-1" width="20" height="20" />
                                        <small class="text-muted">@issue.User.Login</small>
                                    </div>
                                    <small class="text-muted">
                                        opened @issue.CreatedAt.ToString("MMM dd, yyyy")
                                    </small>
                                    @if (issue.CommentCount > 0)
                                    {
                                        <div class="d-flex align-items-center">
                                            <i class="bi bi-chat text-muted me-1"></i>
                                            <small class="text-muted">@issue.CommentCount</small>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        
                        <!-- Action Buttons -->
                        <div class="d-flex gap-1">
                            <button type="button" 
                                    class="btn btn-outline-secondary btn-sm"
                                    @onclick="() => ShowEditModal(issue)">
                                <i class="bi bi-pencil me-1"></i>
                                Edit
                            </button>
                            <button type="button" 
                                    class="btn btn-outline-primary btn-sm"
                                    @onclick="() => ShowAssignModal(issue)">
                                <i class="bi bi-person-plus me-1"></i>
                                Assign
                            </button>
                            @* Feature is broken <button type="button"
                                    class="btn btn-outline-info btn-sm"
                                    disabled="@isCopilotAssigning"
                                    @onclick="() => AssignIssueToCopilotAsync(issue)">
                                @if (isCopilotAssigning)
                                {
                                    <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                }
                                else
                                {
                                    <i class="bi bi-robot me-1"></i>
                                }
                                Copilot
                            </button> *@
                            <button type="button"
                                    class="btn btn-outline-danger btn-sm"
                                    @onclick="() => ShowDeleteModal(issue)">
                                <i class="bi bi-trash me-1"></i>
                                Delete
                            </button>
                        </div>
                    </div>
                    
                    <!-- Issue Body -->
                    @if (!string.IsNullOrEmpty(issue.Body))
                    {
                        <div class="mt-2">
                            <p class="mb-0 text-muted">
                                @(issue.Body.Length > 200 ? issue.Body.Substring(0, 200) + "..." : issue.Body)
                            </p>
                        </div>
                    }
                    
                    <!-- Labels -->
                    @if (issue.Labels.Any())
                    {
                        <div class="d-flex flex-wrap gap-1 mt-2">
                            @foreach (var label in issue.Labels)
                            {
                                <span class="badge" 
                                      style="background-color: #@label.Color; color: @GetContrastColor(label.Color)">
                                    @label.Name
                                </span>
                            }
                        </div>
                    }
                    
                    <!-- Assignees and Milestone -->
                    @if (issue.Assignees.Any() || issue.Milestone != null)
                    {
                        <div class="d-flex gap-3 mt-2 align-items-center">
                            @if (issue.Assignees.Any())
                            {
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-person text-muted me-1"></i>
                                    <small class="text-muted">
                                        Assigned to @string.Join(", ", issue.Assignees.Select(a => a.Login))
                                    </small>
                                </div>
                            }
                            @if (issue.Milestone != null)
                            {
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-flag text-muted me-1"></i>
                                    <small class="text-muted">@issue.Milestone.Title</small>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        }
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert @GetErrorAlertClass(errorMessage)" role="alert">
        <h6 class="alert-heading">Unable to Load Issues</h6>
        <p class="mb-2">@errorMessage</p>
        
        @if (errorMessage.Contains("authentication") || errorMessage.Contains("token"))
        {
            <div class="d-flex gap-2 mt-3">
                <a href="/settings" class="btn btn-primary">
                    <i class="bi bi-gear me-1"></i>
                    Configure Token
                </a>
                <a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token"
                   target="_blank"
                   class="btn btn-outline-info">
                    <i class="bi bi-question-circle me-1"></i>
                    Token Help
                </a>
            </div>
        }
        else if (errorMessage.Contains("network") || errorMessage.Contains("connectivity") || errorMessage.Contains("DNS"))
        {
            <div class="mt-3">
                <p class="mb-2"><strong>Troubleshooting steps:</strong></p>
                <ul class="mb-3">
                    <li>Check your internet connection</li>
                    <li>Verify that api.github.com is accessible from your network</li>
                    <li>If behind a corporate firewall, contact your IT administrator</li>
                    <li>Try again later as GitHub services may be temporarily unavailable</li>
                </ul>
                <button type="button" 
                        class="btn btn-outline-primary"
                        @onclick="LoadData">
                    <i class="bi bi-arrow-clockwise me-1"></i>
                    Try Again
                </button>
            </div>
        }
        else if (errorMessage.Contains("not found") || errorMessage.Contains("Repository"))
        {
            <div class="d-flex gap-2 mt-3">
                <a href="/repositories" class="btn btn-outline-primary">
                    <i class="bi bi-search me-1"></i>
                    Browse Repositories
                </a>
                <button type="button" 
                        class="btn btn-outline-info"
                        @onclick="LoadData">
                    <i class="bi bi-arrow-clockwise me-1"></i>
                    Retry
                </button>
            </div>
        }
        else
        {
            <button type="button" 
                    class="btn btn-outline-primary mt-2"
                    @onclick="LoadData">
                <i class="bi bi-arrow-clockwise me-1"></i>
                Try Again
            </button>
        }
    </div>
}
else
{
    <div class="card">
        <div class="card-body text-center py-5">
            <i class="bi bi-bug text-muted" style="font-size: 3rem;"></i>
            <h6 class="mt-3">No Issues Found</h6>
            <p class="text-muted">
                This repository doesn't have any issues yet.
            </p>
            @if (AuthService.IsAuthenticated)
            {
                <button type="button" 
                        class="btn btn-primary"
                        @onclick="OpenCreateIssueModal">
                    <i class="bi bi-plus me-1"></i>
                    Create First Issue
                </button>
            }
        </div>
    </div>
}

<!-- Simple Create Issue Modal -->
@if (showCreateIssueModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-plus text-primary me-2"></i>
                        Create New Issue
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseCreateIssueModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Issue Title <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" 
                               @bind="newIssueTitle" 
                               placeholder="Enter a descriptive title for the issue..." />
                        <div class="form-text">A clear, concise title that describes the issue</div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Issue Description</label>
                        <textarea class="form-control" rows="8" 
                                  @bind="newIssueBody" 
                                  placeholder="Provide a detailed description of the issue..."></textarea>
                        <div class="form-text">Detailed description of the issue (supports Markdown formatting)</div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(createIssueError))
                    {
                        <div class="alert alert-danger" role="alert">
                            @createIssueError
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseCreateIssueModal">
                        Cancel
                    </button>
                    <button type="button" 
                            class="btn btn-primary"
                            disabled="@(string.IsNullOrWhiteSpace(newIssueTitle) || isCreatingIssue)"
                            @onclick="CreateIssue">
                        @if (isCreatingIssue)
                        {
                            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                        }
                        else
                        {
                            <i class="bi bi-plus me-1"></i>
                        }
                        Create Issue
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Assign Issue Modal -->
@if (ShowAssignIssueModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Assign Issue #@selectedIssue?.Number</h5>
                    <button type="button" class="btn-close" @onclick="CloseAssignModal"></button>
                </div>
                <div class="modal-body">
                    @if (agentAssignmentWarning != null)
                    {
                        <div class="alert alert-warning" role="alert">
                            @agentAssignmentWarning
                        </div>
                    }
                    
                    <h6>Available Assignees</h6>
                    
                    @if (isLoadingAssignees)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading assignees...</p>
                        </div>
                    }
                    else if (availableAssignees.Any())
                    {
                        <div class="d-flex flex-column gap-2">
                            @foreach (var assignee in availableAssignees)
                            {
                                <div class="d-flex align-items-center">
                                    <div class="form-check me-2">
                                        <input class="form-check-input" type="checkbox" 
                                               checked="@selectedAssignees[assignee.Login]"
                                               @onchange="@((ChangeEventArgs e) => selectedAssignees[assignee.Login] = (bool)e.Value!)" />
                                    </div>
                                    <img src="@assignee.AvatarUrl" alt="@assignee.Login" 
                                         class="rounded-circle me-2" width="24" height="24" />
                                    <span>@assignee.Login</span>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info" role="alert">
                            No assignees available for this repository.
                        </div>
                    }
                    
                    @if (selectedIssue?.Assignees.Any() == true)
                    {
                        <hr>
                        <h6>Currently Assigned</h6>
                        <div class="d-flex flex-wrap gap-2">
                            @foreach (var assignee in selectedIssue.Assignees)
                            {
                                <span class="badge bg-primary d-flex align-items-center">
                                    <img src="@assignee.AvatarUrl" alt="@assignee.Login" 
                                         class="rounded-circle me-1" width="16" height="16" />
                                    @assignee.Login
                                </span>
                            }
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAssignModal">
                        Cancel
                    </button>
                    <button type="button" 
                            class="btn btn-primary"
                            disabled="@isAssigningIssue"
                            @onclick="AssignIssue">
                        @if (isAssigningIssue)
                        {
                            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                        }
                        Update Assignment
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Edit Issue Modal -->
@if (ShowEditIssueModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-pencil text-secondary me-2"></i>
                        Edit Issue #@selectedIssue?.Number
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseEditModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Issue Title <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" 
                               @bind="editIssueTitle" 
                               placeholder="Enter issue title..." />
                        <div class="form-text">Brief title that describes the issue</div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Issue Description</label>
                        <textarea class="form-control" rows="8" 
                                  @bind="editIssueBody" 
                                  placeholder="Provide a detailed description of the issue..."></textarea>
                        <div class="form-text">Detailed description of the issue (supports Markdown)</div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(editErrorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @editErrorMessage
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">
                        Cancel
                    </button>
                    <button type="button" 
                            class="btn btn-primary"
                            disabled="@(string.IsNullOrWhiteSpace(editIssueTitle) || isEditingIssue)"
                            @onclick="SaveEditedIssue">
                        @if (isEditingIssue)
                        {
                            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                        }
                        Save Changes
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Issue Confirmation Modal -->
@if (ShowDeleteIssueModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-danger">
                        <i class="bi bi-exclamation-triangle text-danger me-2"></i>
                        Confirm Issue Deletion
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    @if (selectedIssue != null)
                    {
                        <p class="mb-3">
                            Are you sure you want to delete the following issue? This action will close the issue and cannot be undone.
                        </p>
                        
                        <div class="alert alert-danger">
                            <h6 class="fw-bold">
                                #@selectedIssue.Number @selectedIssue.Title
                            </h6>
                            <small class="text-muted">
                                Created by @selectedIssue.User.Login on @selectedIssue.CreatedAt.ToString("MMM dd, yyyy")
                            </small>
                        </div>
                        
                        <p class="text-muted">
                            <strong>Note:</strong> GitHub doesn't support permanent issue deletion. This will close the issue instead.
                        </p>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">
                        Cancel
                    </button>
                    <button type="button" 
                            class="btn btn-danger"
                            disabled="@isDeletingIssue"
                            @onclick="ConfirmDeleteIssue">
                        @if (isDeletingIssue)
                        {
                            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                        }
                        else
                        {
                            <i class="bi bi-trash me-1"></i>
                        }
                        Delete Issue
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string Owner { get; set; } = string.Empty;
    [Parameter] public string Repo { get; set; } = string.Empty;

    private List<GitHubIssue> allIssues = new();
    private List<GitHubIssue> filteredIssues = new();
    private List<GitHubIssue> selectedIssues = new();
    private GitHubRepository? repositoryInfo = null;
    private bool isLoading = false;
    private string? errorMessage = null;
    
    // Simple Create Issue Modal fields
    private bool showCreateIssueModal = false;
    private bool isCreatingIssue = false;
    private string newIssueTitle = string.Empty;
    private string newIssueBody = string.Empty;
    private string? createIssueError = null;

    // Assignment-related fields
    private bool ShowAssignIssueModal = false;
    private bool isLoadingAssignees = false;
    private bool isAssigningIssue = false;
    private GitHubIssue? selectedIssue = null;
    private List<GitHubUser> availableAssignees = new();
    private Dictionary<string, bool> selectedAssignees = new();
    private string? agentAssignmentWarning = null;
    private readonly string[] agentLogins = { "copilot", "swe-copilot-agent", "github-copilot", "copilot-agent" };

    // Track copilot assignment loading state per issue
    private Dictionary<long, bool> copilotAssigning = new();

    // Edit issue-related fields
    private bool ShowEditIssueModal = false;
    private bool isEditingIssue = false;
    private string editIssueTitle = string.Empty;
    private string editIssueBody = string.Empty;
    private string? editErrorMessage = null;

    // Delete issue-related fields
    private bool ShowDeleteIssueModal = false;
    private bool isDeletingIssue = false;

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.IsAuthenticated)
        {
            GitHubService.SetAuthentication(AuthService.CurrentToken!);
        }
        
        // Subscribe to filter changes
        FilterService.FilterChanged += OnFilterServiceChanged;
        
        await LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (AuthService.IsAuthenticated)
        {
            GitHubService.SetAuthentication(AuthService.CurrentToken!);
        }
        if (!string.IsNullOrEmpty(Owner) && !string.IsNullOrEmpty(Repo))
        {
            await LoadData();
        }
    }

    public void Dispose()
    {
        FilterService.FilterChanged -= OnFilterServiceChanged;
    }

    private void OnFilterServiceChanged(IssueFilter filter)
    {
        ApplyFilters();
        StateHasChanged();
    }

    private void ApplyFilters()
    {
        filteredIssues = FilterService.ApplyFilter(allIssues).ToList();
    }

    private async Task OnFilterChanged()
    {
        ApplyFilters();
        StateHasChanged();
    }

    private async Task LoadData()
    {
        await Task.WhenAll(LoadRepositoryInfo(), LoadIssues());
    }

    private async Task LoadRepositoryInfo()
    {
        try
        {
            repositoryInfo = await GitHubService.GetRepositoryAsync(Owner, Repo);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading repository info for {Owner}/{Repo}: {ex.Message}");
        }
    }

    private async Task LoadIssues()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            var result = await GitHubService.GetIssuesAsync(Owner, Repo);
            allIssues = result.ToList();
            ApplyFilters();
        }
        catch (UnauthorizedAccessException authEx)
        {
            allIssues = new List<GitHubIssue>();
            filteredIssues = new List<GitHubIssue>();
            errorMessage = authEx.Message;
        }
        catch (ArgumentException argEx)
        {
            allIssues = new List<GitHubIssue>();
            filteredIssues = new List<GitHubIssue>();
            errorMessage = argEx.Message;
        }
        catch (TimeoutException timeoutEx)
        {
            allIssues = new List<GitHubIssue>();
            filteredIssues = new List<GitHubIssue>();
            errorMessage = timeoutEx.Message;
        }
        catch (InvalidOperationException opEx)
        {
            allIssues = new List<GitHubIssue>();
            filteredIssues = new List<GitHubIssue>();
            errorMessage = opEx.Message;
        }
        catch (Exception ex)
        {
            allIssues = new List<GitHubIssue>();
            filteredIssues = new List<GitHubIssue>();
            
            // Fallback for any other unexpected errors
            if (ex.Message.Contains("DNS") || ex.Message.Contains("proxy") || ex.Message.Contains("network"))
            {
                errorMessage = "Network connectivity issue detected. Please check your internet connection and ensure GitHub API access is not blocked by your network or firewall. If you're behind a corporate network, contact your IT administrator.";
            }
            else
            {
                errorMessage = $"An unexpected error occurred while loading issues: {ex.Message}";
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    // Issue selection methods
    private void ToggleIssueSelection(GitHubIssue issue, bool selected)
    {
        if (selected && !selectedIssues.Any(s => s.Number == issue.Number))
        {
            selectedIssues.Add(issue);
        }
        else if (!selected)
        {
            selectedIssues.RemoveAll(s => s.Number == issue.Number);
        }
        StateHasChanged();
    }

    private void ClearSelection()
    {
        selectedIssues.Clear();
        StateHasChanged();
    }

    private async Task OnBulkIssuesUpdated(List<GitHubIssue> updatedIssues)
    {
        // Update the issues in our lists
        foreach (var updatedIssue in updatedIssues)
        {
            var index = allIssues.FindIndex(i => i.Number == updatedIssue.Number);
            if (index >= 0)
            {
                allIssues[index] = updatedIssue;
            }
        }

        ApplyFilters();
        ClearSelection();
        StateHasChanged();
    }

    // Simple Create Issue Modal Methods
    private void OpenCreateIssueModal()
    {
        newIssueTitle = string.Empty;
        newIssueBody = string.Empty;
        createIssueError = null;
        showCreateIssueModal = true;
        StateHasChanged();
    }

    private void CloseCreateIssueModal()
    {
        showCreateIssueModal = false;
        newIssueTitle = string.Empty;
        newIssueBody = string.Empty;
        createIssueError = null;
        StateHasChanged();
    }

    private async Task CreateIssue()
    {
        if (string.IsNullOrWhiteSpace(newIssueTitle)) 
        {
            createIssueError = "Issue title is required.";
            return;
        }

        isCreatingIssue = true;
        createIssueError = null;
        StateHasChanged();

        try
        {
            var newIssue = await GitHubService.CreateIssueAsync(Owner, Repo, newIssueTitle, newIssueBody ?? string.Empty);
            allIssues.Insert(0, newIssue);
            ApplyFilters();
            CloseCreateIssueModal();
        }
        catch (Exception ex)
        {
            createIssueError = $"Failed to create issue: {ex.Message}";
        }
        finally
        {
            isCreatingIssue = false;
            StateHasChanged();
        }
    }
    
    private static string GetContrastColor(string hexColor)
    {
        // Simple contrast calculation - could be improved
        if (hexColor.Length != 6) return "white";
        
        var r = Convert.ToInt32(hexColor.Substring(0, 2), 16);
        var g = Convert.ToInt32(hexColor.Substring(2, 2), 16);
        var b = Convert.ToInt32(hexColor.Substring(4, 2), 16);
        var brightness = ((r * 299) + (g * 587) + (b * 114)) / 1000;
        
        return brightness > 155 ? "black" : "white";
    }

    private async Task ShowAssignModal(GitHubIssue issue)
    {
        selectedIssue = issue;
        ShowAssignIssueModal = true;
        agentAssignmentWarning = null;
        selectedAssignees.Clear();
        
        // Check for agent assignments
        var hasAgentAssignment = await GitHubService.HasAgentAssignmentAsync(Owner, Repo, issue.Number, agentLogins);
        if (hasAgentAssignment)
        {
            agentAssignmentWarning = "This issue is currently assigned to an agent. Assigning additional users may interfere with automated processes.";
        }
        
        await LoadAvailableAssignees();
        StateHasChanged();
    }

    private async Task LoadAvailableAssignees()
    {
        isLoadingAssignees = true;
        StateHasChanged();

        try
        {
            var assignees = await GitHubService.GetAvailableAssigneesAsync(Owner, Repo);
            availableAssignees = assignees.ToList();
            
            // Initialize selection state based on current assignments
            selectedAssignees.Clear();
            foreach (var assignee in availableAssignees)
            {
                selectedAssignees[assignee.Login] = selectedIssue?.Assignees.Any(a => a.Login == assignee.Login) ?? false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading assignees: {ex.Message}");
        }
        finally
        {
            isLoadingAssignees = false;
            StateHasChanged();
        }
    }

    private async Task AssignIssue()
    {
        if (selectedIssue == null) return;

        var selectedUserLogins = selectedAssignees.Where(kvp => kvp.Value).Select(kvp => kvp.Key).ToList();

        isAssigningIssue = true;
        StateHasChanged();

        try
        {
            var updatedIssue = await GitHubService.AssignIssueAsync(Owner, Repo, selectedIssue.Number, selectedUserLogins);
            
            // Update the issue in the list
            var index = allIssues.FindIndex(i => i.Number == selectedIssue.Number);
            if (index >= 0)
            {
                allIssues[index] = updatedIssue;
                ApplyFilters();
            }
            
            CloseAssignModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error assigning issue: {ex.Message}");
        }
        finally
        {
            isAssigningIssue = false;
            StateHasChanged();
        }
    }

    private void CloseAssignModal()
    {
        ShowAssignIssueModal = false;
        selectedIssue = null;
        availableAssignees.Clear();
        selectedAssignees.Clear();
        agentAssignmentWarning = null;
        StateHasChanged();
    }

    private void ShowEditModal(GitHubIssue issue)
    {
        selectedIssue = issue;
        editIssueTitle = issue.Title;
        editIssueBody = issue.Body ?? string.Empty;
        editErrorMessage = null;
        ShowEditIssueModal = true;
        StateHasChanged();
    }

    private async Task SaveEditedIssue()
    {
        if (selectedIssue == null || string.IsNullOrWhiteSpace(editIssueTitle))
            return;

        isEditingIssue = true;
        editErrorMessage = null;
        StateHasChanged();

        try
        {
            var updatedIssue = await GitHubService.UpdateIssueAsync(Owner, Repo, selectedIssue.Number, editIssueTitle, editIssueBody);
            
            // Update the issue in the list
            var index = allIssues.FindIndex(i => i.Number == selectedIssue.Number);
            if (index >= 0)
            {
                allIssues[index] = updatedIssue;
                ApplyFilters();
            }
            
            CloseEditModal();
        }
        catch (Exception ex)
        {
            editErrorMessage = $"Failed to update issue: {ex.Message}";
            Console.WriteLine($"Error updating issue: {ex.Message}");
        }
        finally
        {
            isEditingIssue = false;
            StateHasChanged();
        }
    }

    private void CloseEditModal()
    {
        ShowEditIssueModal = false;
        selectedIssue = null;
        editIssueTitle = string.Empty;
        editIssueBody = string.Empty;
        editErrorMessage = null;
        StateHasChanged();
    }

    private void ShowDeleteModal(GitHubIssue issue)
    {
        selectedIssue = issue;
        ShowDeleteIssueModal = true;
        StateHasChanged();
    }

    private async Task ConfirmDeleteIssue()
    {
        if (selectedIssue == null) return;

        try
        {
            isDeletingIssue = true;
            StateHasChanged();

            await GitHubService.DeleteIssueAsync(Owner, Repo, selectedIssue.Number);
            
            // Remove from local lists
            allIssues.RemoveAll(i => i.Number == selectedIssue.Number);
            filteredIssues.RemoveAll(i => i.Number == selectedIssue.Number);
            selectedIssues.RemoveAll(i => i.Number == selectedIssue.Number);
            
            CloseDeleteModal();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting issue: {ex.Message}";
        }
        finally
        {
            isDeletingIssue = false;
            StateHasChanged();
        }
    }

    private void CloseDeleteModal()
    {
        ShowDeleteIssueModal = false;
        selectedIssue = null;
        StateHasChanged();
    }

    private static string GetErrorAlertClass(string errorMessage)
    {
        if (errorMessage.Contains("authentication") || errorMessage.Contains("token"))
        {
            return "alert-warning";
        }
        else if (errorMessage.Contains("not found") || errorMessage.Contains("Repository"))
        {
            return "alert-info";
        }
        else if (errorMessage.Contains("network") || errorMessage.Contains("connectivity") || errorMessage.Contains("DNS"))
        {
            return "alert-danger";
        }
        else
        {
            return "alert-warning";
        }
    }

   // TODO May 
   //private async Task AssignIssueToCopilotAsync(GitHubIssue issue)
   //{
   //    if (issue == null) return;
   //    copilotAssigning[issue.Number] = true;
   //    StateHasChanged();
   //    try
   //    {
   //        // talking w/ GH team makes me think this will never work :/
   //        var updatedIssue = await GitHubService.AssignIssueToCopilotAsync(Owner, Repo, issue.Number);
   //        var index = allIssues.FindIndex(i => i.Number == issue.Number);
   //        if (index >= 0)
   //        {
   //            allIssues[index] = updatedIssue;
   //            ApplyFilters();
   //        }
   //    }
   //    catch (Exception ex)
   //    {
   //        Console.WriteLine($"Error assigning issue to Copilot: {ex.Message}");
   //    }
   //    finally
   //    {
   //        copilotAssigning[issue.Number] = false;
   //        StateHasChanged();
   //    }
   //}
}