@page "/management"
@using GitHubIssueManager.Maui.Models
@using GitHubIssueManager.Maui.Services
@inject GitHubService GitHubService
@inject RepositoryService RepositoryService
@inject AuthenticationService AuthService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Management - GitHub Issue Manager</PageTitle>

<!-- Management Header Card -->
<div class="card mb-4" style="background: linear-gradient(135deg, #1e1e1e 0%, #2d2d2d 100%); color: white;">
    <div class="card-body p-4">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb mb-2" style="background: transparent;">
                <li class="breadcrumb-item"><a href="/" class="text-light">Home</a></li>
                <li class="breadcrumb-item active text-light" aria-current="page">Management</li>
            </ol>
        </nav>
        <hr class="border-light opacity-25" />
        <div class="d-flex align-items-center mb-2">
            <i class="bi bi-person-gear fs-2 text-primary me-2"></i>
            <h4 class="mb-0 text-white">Repository & Issue Management</h4>
        </div>
        <p class="text-light opacity-75 mt-1 mb-0">Centralized management for your watched repositories, issues, and system configuration.</p>
    </div>
</div>

@if (!AuthService.IsAuthenticated)
{
    <div class="alert alert-warning mb-4" role="alert">
        <h6 class="alert-heading mb-2">Authentication Required</h6>
        <p class="mb-2">
            Please configure your GitHub token in the
            <a href="/settings" class="alert-link">Settings</a>
            page to access management features.
        </p>
        <div class="d-flex gap-2 mt-3">
            <a href="/settings" class="btn btn-primary btn-sm">
                <i class="bi bi-gear me-1"></i>
                Configure Token
            </a>
        </div>
    </div>
}
else
{
    <!-- Blazor-native Tab Navigation -->
    <ul class="nav nav-tabs mb-4" id="managementTabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "repository" ? "active" : null)" type="button" @onclick='() => SetActiveTab("repository")'>
                <i class="bi bi-folder me-2"></i>
                Repository Management
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "statistics" ? "active" : null)" type="button" @onclick='() => SetActiveTab("statistics")'>
                <i class="bi bi-graph-up me-2"></i>
                Statistics & Insights
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "system" ? "active" : null)" type="button" @onclick='() => SetActiveTab("system")'>
                <i class="bi bi-shield-check me-2"></i>
                System Status
            </button>
        </li>
    </ul>

    <!-- Tab Content -->
    <div class="tab-content" id="managementTabsContent">
        <!-- Repository Management Tab -->
        @if (activeTab == "repository")
        {
            <div class="tab-pane fade show active" id="repository-pane" role="tabpanel" aria-labelledby="repository-tab">
                <div class="stack" style="gap: 2rem;">
                    <!-- Watched Repositories Section -->
                    <div class="card">
                        <div class="card-header">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-eye text-primary me-2"></i>
                                    <h5 class="mb-0">Watched Repositories</h5>
                                    <span class="badge bg-info ms-2">@watchedRepos.Count()</span>
                                </div>
                                <button type="button"
                                        class="btn btn-outline-primary btn-sm"
                                        @onclick="RefreshRepositories"
                                        disabled="@isRefreshing">
                                    @if (isRefreshing)
                                    {
                                        <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-arrow-clockwise me-1"></i>
                                    }
                                    Refresh
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            @if (watchedRepos.Any())
                            {
                                <div class="stack" style="gap: 1rem;">
                                    @foreach (var repo in watchedRepos)
                                    {
                                        <div class="card">
                                            <div class="card-body">
                                                <div class="d-flex justify-content-between align-items-start">
                                                    <div class="flex-grow-1">
                                                        <h6 class="card-title mb-2">
                                                            <a href="@repo.HtmlUrl" target="_blank" class="text-primary text-decoration-none">
                                                                @repo.FullName
                                                            </a>
                                                        </h6>
                                                        <p class="text-secondary mb-2">@repo.Description</p>
                                                        <div class="d-flex gap-3 align-items-center">
                                                            <div class="d-flex align-items-center">
                                                                <i class="bi bi-star text-warning me-1"></i>
                                                                <small>@repo.StargazersCount</small>
                                                            </div>
                                                            <div class="d-flex align-items-center">
                                                                <i class="bi bi-bug text-danger me-1"></i>
                                                                <small>@repo.OpenIssuesCount issues</small>
                                                            </div>
                                                            @if (!string.IsNullOrEmpty(repo.Language))
                                                            {
                                                                <div class="d-flex align-items-center">
                                                                    <i class="bi bi-code text-secondary me-1"></i>
                                                                    <small>@repo.Language</small>
                                                                </div>
                                                            }
                                                        </div>
                                                    </div>
                                                    <div class="d-flex gap-1">
                                                        <a href="/issues/@repo.Owner.Login/@repo.Name" class="btn btn-outline-primary btn-sm">
                                                            <i class="bi bi-bug me-1"></i>
                                                            Issues
                                                        </a>
                                                        <button type="button"
                                                                class="btn btn-outline-danger btn-sm"
                                                                @onclick="() => RemoveRepository(repo)">
                                                            <i class="bi bi-dash-circle me-1"></i>
                                                            Remove
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-5">
                                    <div class="mb-3" style="font-size: 3rem;">📁</div>
                                    <p class="text-secondary mb-4">No repositories in your watchlist yet.</p>
                                    <a href="/repositories" class="btn btn-primary">
                                        <i class="bi bi-plus me-1"></i>
                                        Add Repositories
                                    </a>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Bulk Operations Section -->
                    <div class="card">
                        <div class="card-header">
                            <div class="d-flex align-items-center">
                                <i class="bi bi-sliders text-secondary me-2"></i>
                                <h5 class="mb-0">Bulk Operations</h5>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-12 col-md-4 mb-3">
                                    <div class="card h-100">
                                        <div class="card-body">
                                            <h6 class="card-title">Repository Actions</h6>
                                            <div class="d-grid gap-2">
                                                <button type="button"
                                                        class="btn btn-outline-warning btn-sm"
                                                        @onclick="() => showClearAllDialog = true">
                                                    <i class="bi bi-trash me-1"></i>
                                                    Clear All Watchlist
                                                </button>
                                                <button type="button"
                                                        class="btn btn-outline-info btn-sm"
                                                        @onclick="ExportWatchlist">
                                                    <i class="bi bi-download me-1"></i>
                                                    Export Watchlist
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12 col-md-4 mb-3">
                                    <div class="card h-100">
                                        <div class="card-body">
                                            <h6 class="card-title">Copy Git URLs</h6>
                                            <div class="d-grid gap-2">
                                                <button type="button"
                                                        class="btn btn-outline-success btn-sm"
                                                        @onclick="CopyAllGitUrls"
                                                        disabled="@isCopyingAllUrls">
                                                    @if (isCopyingAllUrls)
                                                    {
                                                        <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                                    }
                                                    else
                                                    {
                                                        <i class="bi bi-clipboard me-1"></i>
                                                    }
                                                    Copy All Git URLs
                                                </button>
                                                <button type="button"
                                                        class="btn btn-outline-primary btn-sm"
                                                        @onclick="CopyWatchedGitUrls"
                                                        disabled="@isCopyingWatchedUrls">
                                                    @if (isCopyingWatchedUrls)
                                                    {
                                                        <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                                    }
                                                    else
                                                    {
                                                        <i class="bi bi-eye me-1"></i>
                                                    }
                                                    Copy Watched Git URLs
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-12 col-md-4 mb-3">
                                    <div class="card h-100">
                                        <div class="card-body">
                                            <h6 class="card-title">Data Management</h6>
                                            <div class="d-grid gap-2">
                                                <button type="button"
                                                        class="btn btn-outline-primary btn-sm"
                                                        @onclick="RefreshAllData"
                                                        disabled="@isRefreshingAll">
                                                    @if (isRefreshingAll)
                                                    {
                                                        <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                                    }
                                                    else
                                                    {
                                                        <i class="bi bi-arrow-clockwise me-1"></i>
                                                    }
                                                    Refresh All Data
                                                </button>
                                                <a href="/settings" class="btn btn-outline-secondary btn-sm">
                                                    <i class="bi bi-gear me-1"></i>
                                                    System Settings
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        <!-- Statistics & Insights Tab -->
        @if (activeTab == "statistics")
        {
            <div class="tab-pane fade show active" id="statistics-pane" role="tabpanel" aria-labelledby="statistics-tab">
                <div class="stack" style="gap: 2rem;">
                    <!-- Overview Statistics -->
                    <div class="row">
                        <div class="col-12 col-sm-6 col-md-3 mb-3">
                            <div class="card text-center">
                                <div class="card-body">
                                    <h2 class="text-primary">@watchedRepos.Count()</h2>
                                    <p class="text-secondary mb-0">Watched Repositories</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-12 col-sm-6 col-md-3 mb-3">
                            <div class="card text-center">
                                <div class="card-body">
                                    <h2 class="text-warning">@totalOpenIssues</h2>
                                    <p class="text-secondary mb-0">Total Open Issues</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-12 col-sm-6 col-md-3 mb-3">
                            <div class="card text-center">
                                <div class="card-body">
                                    <h2 class="text-info">@totalStars</h2>
                                    <p class="text-secondary mb-0">Total Stars</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-12 col-sm-6 col-md-3 mb-3">
                            <div class="card text-center">
                                <div class="card-body">
                                    <h2 class="text-success">@uniqueLanguages.Count</h2>
                                    <p class="text-secondary mb-0">Languages Used</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Repository Insights -->
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">Repository Insights</h5>
                        </div>
                        <div class="card-body">
                            @if (watchedRepos.Any())
                            {
                                <div class="row">
                                    <div class="col-12 col-md-6 mb-4">
                                        <h6 class="mb-3">Most Active Repositories (by Issues)</h6>
                                        @foreach (var repo in watchedRepos.OrderByDescending(r => r.OpenIssuesCount).Take(5))
                                        {
                                            <div class="card mb-2">
                                                <div class="card-body py-2">
                                                    <div class="d-flex justify-content-between align-items-center">
                                                        <span class="small">@repo.Name</span>
                                                        <span class="badge bg-warning">@repo.OpenIssuesCount issues</span>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                    <div class="col-12 col-md-6 mb-4">
                                        <h6 class="mb-3">Most Popular Repositories (by Stars)</h6>
                                        @foreach (var repo in watchedRepos.OrderByDescending(r => r.StargazersCount).Take(5))
                                        {
                                            <div class="card mb-2">
                                                <div class="card-body py-2">
                                                    <div class="d-flex justify-content-between align-items-center">
                                                        <span class="small">@repo.Name</span>
                                                        <span class="badge bg-info">⭐ @repo.StargazersCount</span>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>

                                <!-- Language Distribution -->
                                @if (uniqueLanguages.Any())
                                {
                                    <hr />
                                    <h6 class="mb-3">Programming Languages</h6>
                                    <div class="d-flex flex-wrap gap-1">
                                        @foreach (var language in uniqueLanguages.Take(10))
                                        {
                                            <span class="badge bg-primary">@language</span>
                                        }
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="text-center py-4">
                                    <p class="text-secondary">No data available. Add repositories to your watchlist to see insights.</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        <!-- System Status Tab -->
        @if (activeTab == "system")
        {
            <div class="tab-pane fade show active" id="system-pane" role="tabpanel" aria-labelledby="system-tab">
                <div class="stack" style="gap: 2rem;">
                    <!-- Authentication Status -->
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">Authentication Status</h5>
                        </div>
                        <div class="card-body">
                            <div class="d-flex align-items-center mb-3">
                                @if (AuthService.IsAuthenticated)
                                {
                                    <i class="bi bi-check-circle text-success me-2"></i>
                                    <span>GitHub Token Configured</span>
                                }
                                else
                                {
                                    <i class="bi bi-x-circle text-danger me-2"></i>
                                    <span>GitHub Token Not Configured</span>
                                }
                            </div>
                            @if (!AuthService.IsAuthenticated)
                            {
                                <a href="/settings" class="btn btn-primary">
                                    <i class="bi bi-gear me-1"></i>
                                    Configure Token
                                </a>
                            }
                        </div>
                    </div>

                    <!-- GitHub API Status -->
                    <div class="card">
                        <div class="card-header">
                            <div class="d-flex justify-content-between align-items-center">
                                <h5 class="mb-0">GitHub API Connectivity</h5>
                                <button type="button"
                                        class="btn btn-outline-primary btn-sm"
                                        @onclick="CheckApiStatus"
                                        disabled="@isCheckingApi">
                                    @if (isCheckingApi)
                                    {
                                        <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-arrow-clockwise me-1"></i>
                                    }
                                    Test Connection
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="d-flex align-items-center mb-3">
                                @if (apiStatus == null)
                                {
                                    <i class="bi bi-question-circle text-info me-2"></i>
                                    <span>API status unknown - click "Test Connection" to check</span>
                                }
                                else if (apiStatus == true)
                                {
                                    <i class="bi bi-check-circle text-success me-2"></i>
                                    <span>GitHub API is accessible</span>
                                }
                                else
                                {
                                    <i class="bi bi-x-circle text-danger me-2"></i>
                                    <span>GitHub API is not accessible</span>
                                }
                            </div>
                            @if (!string.IsNullOrEmpty(apiErrorMessage))
                            {
                                <div class="alert alert-danger">
                                    <small>@apiErrorMessage</small>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Application Information -->
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">Application Information</h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-12 col-md-6 mb-3">
                                    <small class="text-secondary">Application Version</small>
                                    <div>GitHub Issue Manager v1.0</div>
                                </div>
                                <div class="col-12 col-md-6 mb-3">
                                    <small class="text-secondary">Framework</small>
                                    <div>.NET 8 Blazor Server</div>
                                </div>
                                <div class="col-12 col-md-6 mb-3">
                                    <small class="text-secondary">Last Updated</small>
                                    <div>@DateTime.UtcNow.ToString("MMM dd, yyyy")</div>
                                </div>
                                <div class="col-12 col-md-6 mb-3">
                                    <small class="text-secondary">UI Framework</small>
                                    <div>Bootstrap 5</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

<!-- Clear All Confirmation Modal -->
@if (showClearAllDialog)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-exclamation-triangle text-warning me-2"></i>
                        Clear All Watched Repositories
                    </h5>
                    <button type="button" class="btn-close" @onclick="() => showClearAllDialog = false"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to remove all repositories from your watchlist? This action cannot be undone.</p>
                    <p class="text-secondary">This will remove <strong>@watchedRepos.Count()</strong> repositories from your watchlist.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() => showClearAllDialog = false">
                        Cancel
                    </button>
                    <button type="button"
                            class="btn btn-warning"
                            @onclick="ClearAllRepositories">
                        <i class="bi bi-trash me-1"></i>
                        Clear All
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string activeTab = "repository";
    private void SetActiveTab(string tab)
    {
        activeTab = tab;
    }

    private IEnumerable<GitHubRepository> watchedRepos = new List<GitHubRepository>();
    private bool isRefreshing = false;
    private bool isRefreshingAll = false;
    private bool isCheckingApi = false;
    private bool showClearAllDialog = false;
    private bool? apiStatus = null;
    private string? apiErrorMessage = null;
    private bool isCopyingUrls = false;
    private bool isCopyingAllUrls = false;
    private bool isCopyingWatchedUrls = false;

    // Statistics
    private int totalOpenIssues => watchedRepos.Sum(r => r.OpenIssuesCount);
    private int totalStars => watchedRepos.Sum(r => r.StargazersCount);
    private HashSet<string> uniqueLanguages => watchedRepos
        .Where(r => !string.IsNullOrEmpty(r.Language))
        .Select(r => r.Language!)
        .ToHashSet();

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.IsAuthenticated)
        {
            GitHubService.SetAuthentication(AuthService.CurrentToken!);
        }
        LoadWatchedRepositories();
    }

    private void LoadWatchedRepositories()
    {
        watchedRepos = RepositoryService.GetWatchedRepositories();
        StateHasChanged();
    }

    private async Task RefreshRepositories()
    {
        isRefreshing = true;
        StateHasChanged();

        try
        {
            // Refresh repository data from GitHub API
            var updatedRepos = new List<GitHubRepository>();
            foreach (var repo in watchedRepos)
            {
                try
                {
                    var updatedRepo = await GitHubService.GetRepositoryAsync(repo.Owner.Login, repo.Name);
                    updatedRepos.Add(updatedRepo);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error refreshing repository {repo.FullName}: {ex.Message}");
                    // Keep the original repo if refresh fails
                    updatedRepos.Add(repo);
                }
            }

            // Update the watched repositories with fresh data
            foreach (var updatedRepo in updatedRepos)
            {
                RepositoryService.RemoveRepository(updatedRepo.Id);
                RepositoryService.AddRepository(updatedRepo);
            }

            LoadWatchedRepositories();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during repository refresh: {ex.Message}");
        }
        finally
        {
            isRefreshing = false;
            StateHasChanged();
        }
    }

    private async Task RefreshAllData()
    {
        isRefreshingAll = true;
        StateHasChanged();

        try
        {
            await RefreshRepositories();
            await CheckApiStatus();
        }
        finally
        {
            isRefreshingAll = false;
            StateHasChanged();
        }
    }

    private async Task CheckApiStatus()
    {
        if (!AuthService.IsAuthenticated) return;

        isCheckingApi = true;
        apiStatus = null;
        apiErrorMessage = null;
        StateHasChanged();

        try
        {
            // Test API connectivity by making a simple request
            await GitHubService.GetUserAsync();
            apiStatus = true;
        }
        catch (Exception ex)
        {
            apiStatus = false;
            apiErrorMessage = ex.Message;
        }
        finally
        {
            isCheckingApi = false;
            StateHasChanged();
        }
    }

    private void RemoveRepository(GitHubRepository repository)
    {
        RepositoryService.RemoveRepository(repository.Id);
        LoadWatchedRepositories();
    }

    private void ClearAllRepositories()
    {
        foreach (var repo in watchedRepos.ToList())
        {
            RepositoryService.RemoveRepository(repo.Id);
        }
        LoadWatchedRepositories();
        showClearAllDialog = false;
    }

    private void ExportWatchlist()
    {
        try
        {
            var exportData = System.Text.Json.JsonSerializer.Serialize(watchedRepos, new System.Text.Json.JsonSerializerOptions
            {
                WriteIndented = true
            });

            // In a real implementation, you would trigger a file download
            // For now, we'll just log it to console
            Console.WriteLine("Watchlist Export:");
            Console.WriteLine(exportData);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting watchlist: {ex.Message}");
        }
    }

    private async Task CopyAllGitUrls()
    {
        if (!AuthService.IsAuthenticated)
            return;

        isCopyingAllUrls = true;
        StateHasChanged();

        try
        {
            // Get all repositories from GitHub API
            var allRepos = await GitHubService.GetRepositoriesAsync();

            var gitUrls = allRepos
                .Select(repo => $"{repo.HtmlUrl}.git")
                .ToList();

            var urlsText = string.Join(Environment.NewLine, gitUrls);

            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", urlsText);

            Console.WriteLine($"Copied {gitUrls.Count} git URLs (all repositories) to clipboard");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error copying all git URLs to clipboard: {ex.Message}");
        }
        finally
        {
            isCopyingAllUrls = false;
            StateHasChanged();
        }
    }

    private async Task CopyWatchedGitUrls()
    {
        if (!watchedRepos.Any())
            return;

        isCopyingWatchedUrls = true;
        StateHasChanged();

        try
        {
            var gitUrls = watchedRepos
                .Select(repo => $"{repo.HtmlUrl}.git")
                .ToList();

            var urlsText = string.Join(Environment.NewLine, gitUrls);

            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", urlsText);

            Console.WriteLine($"Copied {gitUrls.Count} git URLs (watched repositories) to clipboard");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error copying watched git URLs to clipboard: {ex.Message}");
        }
        finally
        {
            isCopyingWatchedUrls = false;
            StateHasChanged();
        }
    }

    // Keep the old method for backward compatibility (though it's no longer used in the UI)
    private async Task CopyGitUrls()
    {
        await CopyWatchedGitUrls();
    }
}